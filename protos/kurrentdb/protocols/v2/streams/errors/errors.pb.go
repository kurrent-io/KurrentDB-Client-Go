// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.26.0
// source: kurrentdb/protocols/v2/streams/errors.proto

package streams

import (
	_ "github.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamsError int32

const (
	// Default value. This value is not used.
	// An error code MUST always be set to a non-zero value.
	// If an error code is not explicitly set, it MUST be treated as
	// an internal server error (INTERNAL).
	StreamsError_STREAMS_ERROR_UNSPECIFIED StreamsError = 0
	// The stream was not found.
	// This is recoverable by the client by creating the stream first.
	StreamsError_STREAMS_ERROR_STREAM_NOT_FOUND StreamsError = 1
	// The stream already exists.
	// This is recoverable by the client by using the existing stream.
	StreamsError_STREAMS_ERROR_STREAM_ALREADY_EXISTS StreamsError = 2
	// The stream has been soft deleted.
	// It will not be visible in the stream list, until it is restored by appending to it again.
	StreamsError_STREAMS_ERROR_STREAM_DELETED StreamsError = 3
	// The stream has been tombstoned.
	// It has been permanently removed from the system and cannot be restored.
	StreamsError_STREAMS_ERROR_STREAM_TOMBSTONED StreamsError = 4
	// The expected revision of the stream does not match the actual revision.
	// This is recoverable by the client by fetching the current revision and retrying.
	StreamsError_STREAMS_ERROR_STREAM_REVISION_CONFLICT StreamsError = 5
	// The size of a record being appended exceeds the maximum allowed size.
	// It is recoverable by the client by sending a smaller record.
	StreamsError_STREAMS_ERROR_APPEND_RECORD_SIZE_EXCEEDED StreamsError = 6
	// When the transaction exceeds the maximum size allowed (max chunk size).
	// It is recoverable by the client by sending a smaller transaction.
	StreamsError_STREAMS_ERROR_APPEND_TRANSACTION_SIZE_EXCEEDED StreamsError = 7
	// The stream is already in an append session.
	// Appending to the same stream multiple times is currently not supported.
	StreamsError_STREAMS_ERROR_STREAM_ALREADY_IN_APPEND_SESSION StreamsError = 8
)

// Enum value maps for StreamsError.
var (
	StreamsError_name = map[int32]string{
		0: "STREAMS_ERROR_UNSPECIFIED",
		1: "STREAMS_ERROR_STREAM_NOT_FOUND",
		2: "STREAMS_ERROR_STREAM_ALREADY_EXISTS",
		3: "STREAMS_ERROR_STREAM_DELETED",
		4: "STREAMS_ERROR_STREAM_TOMBSTONED",
		5: "STREAMS_ERROR_STREAM_REVISION_CONFLICT",
		6: "STREAMS_ERROR_APPEND_RECORD_SIZE_EXCEEDED",
		7: "STREAMS_ERROR_APPEND_TRANSACTION_SIZE_EXCEEDED",
		8: "STREAMS_ERROR_STREAM_ALREADY_IN_APPEND_SESSION",
	}
	StreamsError_value = map[string]int32{
		"STREAMS_ERROR_UNSPECIFIED":                      0,
		"STREAMS_ERROR_STREAM_NOT_FOUND":                 1,
		"STREAMS_ERROR_STREAM_ALREADY_EXISTS":            2,
		"STREAMS_ERROR_STREAM_DELETED":                   3,
		"STREAMS_ERROR_STREAM_TOMBSTONED":                4,
		"STREAMS_ERROR_STREAM_REVISION_CONFLICT":         5,
		"STREAMS_ERROR_APPEND_RECORD_SIZE_EXCEEDED":      6,
		"STREAMS_ERROR_APPEND_TRANSACTION_SIZE_EXCEEDED": 7,
		"STREAMS_ERROR_STREAM_ALREADY_IN_APPEND_SESSION": 8,
	}
)

func (x StreamsError) Enum() *StreamsError {
	p := new(StreamsError)
	*p = x
	return p
}

func (x StreamsError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamsError) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_errors_proto_enumTypes[0].Descriptor()
}

func (StreamsError) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_errors_proto_enumTypes[0]
}

func (x StreamsError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamsError.Descriptor instead.
func (StreamsError) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{0}
}

type StreamNotFoundErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that was not found.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamNotFoundErrorDetails) Reset() {
	*x = StreamNotFoundErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamNotFoundErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNotFoundErrorDetails) ProtoMessage() {}

func (x *StreamNotFoundErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNotFoundErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamNotFoundErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{0}
}

func (x *StreamNotFoundErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type StreamAlreadyExistsErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that already exists.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAlreadyExistsErrorDetails) Reset() {
	*x = StreamAlreadyExistsErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAlreadyExistsErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAlreadyExistsErrorDetails) ProtoMessage() {}

func (x *StreamAlreadyExistsErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAlreadyExistsErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamAlreadyExistsErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{1}
}

func (x *StreamAlreadyExistsErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type StreamDeletedErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that was deleted.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDeletedErrorDetails) Reset() {
	*x = StreamDeletedErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDeletedErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeletedErrorDetails) ProtoMessage() {}

func (x *StreamDeletedErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeletedErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamDeletedErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{2}
}

func (x *StreamDeletedErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type StreamTombstonedErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that was tombstoned.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTombstonedErrorDetails) Reset() {
	*x = StreamTombstonedErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTombstonedErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTombstonedErrorDetails) ProtoMessage() {}

func (x *StreamTombstonedErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTombstonedErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamTombstonedErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{3}
}

func (x *StreamTombstonedErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type StreamRevisionConflictErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that had a revision conflict.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The actual revision of the stream.
	ExpectedRevision int64 `protobuf:"varint,2,opt,name=expected_revision,json=expectedRevision,proto3" json:"expected_revision,omitempty"`
	// The actual revision of the stream.
	ActualRevision int64 `protobuf:"varint,3,opt,name=actual_revision,json=actualRevision,proto3" json:"actual_revision,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamRevisionConflictErrorDetails) Reset() {
	*x = StreamRevisionConflictErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRevisionConflictErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRevisionConflictErrorDetails) ProtoMessage() {}

func (x *StreamRevisionConflictErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRevisionConflictErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamRevisionConflictErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{4}
}

func (x *StreamRevisionConflictErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *StreamRevisionConflictErrorDetails) GetExpectedRevision() int64 {
	if x != nil {
		return x.ExpectedRevision
	}
	return 0
}

func (x *StreamRevisionConflictErrorDetails) GetActualRevision() int64 {
	if x != nil {
		return x.ActualRevision
	}
	return 0
}

type AppendRecordSizeExceededErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream where the append was attempted.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The identifier of the offending and oversized record.
	RecordId string `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// The size of the huge record in bytes.
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The maximum allowed size of a single record that can be appended in bytes.
	MaxSize       int32 `protobuf:"varint,4,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendRecordSizeExceededErrorDetails) Reset() {
	*x = AppendRecordSizeExceededErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRecordSizeExceededErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRecordSizeExceededErrorDetails) ProtoMessage() {}

func (x *AppendRecordSizeExceededErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRecordSizeExceededErrorDetails.ProtoReflect.Descriptor instead.
func (*AppendRecordSizeExceededErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{5}
}

func (x *AppendRecordSizeExceededErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendRecordSizeExceededErrorDetails) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *AppendRecordSizeExceededErrorDetails) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AppendRecordSizeExceededErrorDetails) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type AppendTransactionSizeExceededErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The size of the huge transaction in bytes.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The maximum allowed size of the append transaction in bytes.
	MaxSize       int32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendTransactionSizeExceededErrorDetails) Reset() {
	*x = AppendTransactionSizeExceededErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendTransactionSizeExceededErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendTransactionSizeExceededErrorDetails) ProtoMessage() {}

func (x *AppendTransactionSizeExceededErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendTransactionSizeExceededErrorDetails.ProtoReflect.Descriptor instead.
func (*AppendTransactionSizeExceededErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{6}
}

func (x *AppendTransactionSizeExceededErrorDetails) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AppendTransactionSizeExceededErrorDetails) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type StreamAlreadyInAppendSessionErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream that is already in an append session.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAlreadyInAppendSessionErrorDetails) Reset() {
	*x = StreamAlreadyInAppendSessionErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAlreadyInAppendSessionErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAlreadyInAppendSessionErrorDetails) ProtoMessage() {}

func (x *StreamAlreadyInAppendSessionErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAlreadyInAppendSessionErrorDetails.ProtoReflect.Descriptor instead.
func (*StreamAlreadyInAppendSessionErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP(), []int{7}
}

func (x *StreamAlreadyInAppendSessionErrorDetails) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

var File_kurrentdb_protocols_v2_streams_errors_proto protoreflect.FileDescriptor

const file_kurrentdb_protocols_v2_streams_errors_proto_rawDesc = "" +
	"\n" +
	"+kurrentdb/protocols/v2/streams/errors.proto\x12$kurrentdb.protocol.v2.streams.errors\x1a kurrentdb/protocols/v2/rpc.proto\"4\n" +
	"\x1aStreamNotFoundErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\"9\n" +
	"\x1fStreamAlreadyExistsErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\"3\n" +
	"\x19StreamDeletedErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\"6\n" +
	"\x1cStreamTombstonedErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\"\x9a\x01\n" +
	"\"StreamRevisionConflictErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12/\n" +
	"\x11expected_revision\x18\x02 \x01(\x03B\x020\x01R\x10expectedRevision\x12+\n" +
	"\x0factual_revision\x18\x03 \x01(\x03B\x020\x01R\x0eactualRevision\"\x8a\x01\n" +
	"$AppendRecordSizeExceededErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12\x1b\n" +
	"\trecord_id\x18\x02 \x01(\tR\brecordId\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\x12\x19\n" +
	"\bmax_size\x18\x04 \x01(\x05R\amaxSize\"Z\n" +
	")AppendTransactionSizeExceededErrorDetails\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x05R\x04size\x12\x19\n" +
	"\bmax_size\x18\x02 \x01(\x05R\amaxSize\"B\n" +
	"(StreamAlreadyInAppendSessionErrorDetails\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream*\xd4\x03\n" +
	"\fStreamsError\x12\x1d\n" +
	"\x19STREAMS_ERROR_UNSPECIFIED\x10\x00\x12,\n" +
	"\x1eSTREAMS_ERROR_STREAM_NOT_FOUND\x10\x01\x1a\b\x82\xb5\x18\x04\b\x05\x10\x01\x121\n" +
	"#STREAMS_ERROR_STREAM_ALREADY_EXISTS\x10\x02\x1a\b\x82\xb5\x18\x04\b\x06\x10\x01\x12*\n" +
	"\x1cSTREAMS_ERROR_STREAM_DELETED\x10\x03\x1a\b\x82\xb5\x18\x04\b\t\x10\x01\x12-\n" +
	"\x1fSTREAMS_ERROR_STREAM_TOMBSTONED\x10\x04\x1a\b\x82\xb5\x18\x04\b\t\x10\x01\x124\n" +
	"&STREAMS_ERROR_STREAM_REVISION_CONFLICT\x10\x05\x1a\b\x82\xb5\x18\x04\b\t\x10\x01\x127\n" +
	")STREAMS_ERROR_APPEND_RECORD_SIZE_EXCEEDED\x10\x06\x1a\b\x82\xb5\x18\x04\b\x03\x10\x01\x12<\n" +
	".STREAMS_ERROR_APPEND_TRANSACTION_SIZE_EXCEEDED\x10\a\x1a\b\x82\xb5\x18\x04\b\n" +
	"\x10\x01\x12<\n" +
	".STREAMS_ERROR_STREAM_ALREADY_IN_APPEND_SESSION\x10\b\x1a\b\x82\xb5\x18\x04\b\n" +
	"\x10\x01B\xa3\x01\n" +
	"'io.kurrentdb.protocol.v2.streams.errorsP\x01ZOgithub.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/streams\xaa\x02$KurrentDB.Protocol.V2.Streams.Errorsb\x06proto3"

var (
	file_kurrentdb_protocols_v2_streams_errors_proto_rawDescOnce sync.Once
	file_kurrentdb_protocols_v2_streams_errors_proto_rawDescData []byte
)

func file_kurrentdb_protocols_v2_streams_errors_proto_rawDescGZIP() []byte {
	file_kurrentdb_protocols_v2_streams_errors_proto_rawDescOnce.Do(func() {
		file_kurrentdb_protocols_v2_streams_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_errors_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_errors_proto_rawDesc)))
	})
	return file_kurrentdb_protocols_v2_streams_errors_proto_rawDescData
}

var file_kurrentdb_protocols_v2_streams_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_kurrentdb_protocols_v2_streams_errors_proto_goTypes = []any{
	(StreamsError)(0),                                 // 0: kurrentdb.protocol.v2.streams.errors.StreamsError
	(*StreamNotFoundErrorDetails)(nil),                // 1: kurrentdb.protocol.v2.streams.errors.StreamNotFoundErrorDetails
	(*StreamAlreadyExistsErrorDetails)(nil),           // 2: kurrentdb.protocol.v2.streams.errors.StreamAlreadyExistsErrorDetails
	(*StreamDeletedErrorDetails)(nil),                 // 3: kurrentdb.protocol.v2.streams.errors.StreamDeletedErrorDetails
	(*StreamTombstonedErrorDetails)(nil),              // 4: kurrentdb.protocol.v2.streams.errors.StreamTombstonedErrorDetails
	(*StreamRevisionConflictErrorDetails)(nil),        // 5: kurrentdb.protocol.v2.streams.errors.StreamRevisionConflictErrorDetails
	(*AppendRecordSizeExceededErrorDetails)(nil),      // 6: kurrentdb.protocol.v2.streams.errors.AppendRecordSizeExceededErrorDetails
	(*AppendTransactionSizeExceededErrorDetails)(nil), // 7: kurrentdb.protocol.v2.streams.errors.AppendTransactionSizeExceededErrorDetails
	(*StreamAlreadyInAppendSessionErrorDetails)(nil),  // 8: kurrentdb.protocol.v2.streams.errors.StreamAlreadyInAppendSessionErrorDetails
}
var file_kurrentdb_protocols_v2_streams_errors_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kurrentdb_protocols_v2_streams_errors_proto_init() }
func file_kurrentdb_protocols_v2_streams_errors_proto_init() {
	if File_kurrentdb_protocols_v2_streams_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_errors_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_errors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kurrentdb_protocols_v2_streams_errors_proto_goTypes,
		DependencyIndexes: file_kurrentdb_protocols_v2_streams_errors_proto_depIdxs,
		EnumInfos:         file_kurrentdb_protocols_v2_streams_errors_proto_enumTypes,
		MessageInfos:      file_kurrentdb_protocols_v2_streams_errors_proto_msgTypes,
	}.Build()
	File_kurrentdb_protocols_v2_streams_errors_proto = out.File
	file_kurrentdb_protocols_v2_streams_errors_proto_goTypes = nil
	file_kurrentdb_protocols_v2_streams_errors_proto_depIdxs = nil
}
