// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: kurrentdb/protocols/v2/streams/streams.proto

package streams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamsService_AppendSession_FullMethodName = "/kurrentdb.protocol.v2.streams.StreamsService/AppendSession"
)

// StreamsServiceClient is the client API for StreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsServiceClient interface {
	// Appends records to multiple streams atomically within a single transaction.
	//
	// This is a client-streaming RPC where the client sends multiple AppendRequest messages
	// (one per stream) and receives a single AppendSessionResponse upon commit.
	//
	// Guarantees:
	// - Atomicity: All writes succeed or all fail together
	// - Optimistic Concurrency: Expected revisions are validated for all streams before commit
	// - Ordering: Records within each stream maintain send order
	//
	// Current Limitations:
	// - Each stream can only appear once per session (no multiple appends to same stream)
	//
	// Example flow:
	//  1. Client opens stream
	//  2. Client sends AppendRequest for stream "orders" with 3 records
	//  3. Client sends AppendRequest for stream "inventory" with 2 records
	//  4. Client completes the stream
	//  5. Server validates, commits, returns AppendSessionResponse with positions
	AppendSession(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppendRequest, AppendSessionResponse], error)
}

type streamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsServiceClient(cc grpc.ClientConnInterface) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) AppendSession(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppendRequest, AppendSessionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamsService_ServiceDesc.Streams[0], StreamsService_AppendSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppendRequest, AppendSessionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_AppendSessionClient = grpc.ClientStreamingClient[AppendRequest, AppendSessionResponse]

// StreamsServiceServer is the server API for StreamsService service.
// All implementations must embed UnimplementedStreamsServiceServer
// for forward compatibility.
type StreamsServiceServer interface {
	// Appends records to multiple streams atomically within a single transaction.
	//
	// This is a client-streaming RPC where the client sends multiple AppendRequest messages
	// (one per stream) and receives a single AppendSessionResponse upon commit.
	//
	// Guarantees:
	// - Atomicity: All writes succeed or all fail together
	// - Optimistic Concurrency: Expected revisions are validated for all streams before commit
	// - Ordering: Records within each stream maintain send order
	//
	// Current Limitations:
	// - Each stream can only appear once per session (no multiple appends to same stream)
	//
	// Example flow:
	//  1. Client opens stream
	//  2. Client sends AppendRequest for stream "orders" with 3 records
	//  3. Client sends AppendRequest for stream "inventory" with 2 records
	//  4. Client completes the stream
	//  5. Server validates, commits, returns AppendSessionResponse with positions
	AppendSession(grpc.ClientStreamingServer[AppendRequest, AppendSessionResponse]) error
	mustEmbedUnimplementedStreamsServiceServer()
}

// UnimplementedStreamsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamsServiceServer struct{}

func (UnimplementedStreamsServiceServer) AppendSession(grpc.ClientStreamingServer[AppendRequest, AppendSessionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AppendSession not implemented")
}
func (UnimplementedStreamsServiceServer) mustEmbedUnimplementedStreamsServiceServer() {}
func (UnimplementedStreamsServiceServer) testEmbeddedByValue()                        {}

// UnsafeStreamsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsServiceServer will
// result in compilation errors.
type UnsafeStreamsServiceServer interface {
	mustEmbedUnimplementedStreamsServiceServer()
}

func RegisterStreamsServiceServer(s grpc.ServiceRegistrar, srv StreamsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamsService_ServiceDesc, srv)
}

func _StreamsService_AppendSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamsServiceServer).AppendSession(&grpc.GenericServerStream[AppendRequest, AppendSessionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_AppendSessionServer = grpc.ClientStreamingServer[AppendRequest, AppendSessionResponse]

// StreamsService_ServiceDesc is the grpc.ServiceDesc for StreamsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kurrentdb.protocol.v2.streams.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendSession",
			Handler:       _StreamsService_AppendSession_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kurrentdb/protocols/v2/streams/streams.proto",
}
