// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.0
// source: kurrentdb/protocols/v2/streams/streams.proto

package streams

import (
	core "github.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/core"
	shared "github.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/streams/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Constants that match the expected state of a stream during an
// append operation. It can be used to specify whether the stream should exist,
// not exist, or can be in any state.
type ExpectedRevisionConstants int32

const (
	// The stream should exist and the expected revision should match the current
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT ExpectedRevisionConstants = 0
	// It is not important whether the stream exists or not.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_ANY ExpectedRevisionConstants = -2
	// The stream should not exist. If it does, the append will fail.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_NO_STREAM ExpectedRevisionConstants = -1
	// The stream should exist
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_EXISTS ExpectedRevisionConstants = -4
)

// Enum value maps for ExpectedRevisionConstants.
var (
	ExpectedRevisionConstants_name = map[int32]string{
		0:  "EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT",
		-2: "EXPECTED_REVISION_CONSTANTS_ANY",
		-1: "EXPECTED_REVISION_CONSTANTS_NO_STREAM",
		-4: "EXPECTED_REVISION_CONSTANTS_EXISTS",
	}
	ExpectedRevisionConstants_value = map[string]int32{
		"EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT": 0,
		"EXPECTED_REVISION_CONSTANTS_ANY":          -2,
		"EXPECTED_REVISION_CONSTANTS_NO_STREAM":    -1,
		"EXPECTED_REVISION_CONSTANTS_EXISTS":       -4,
	}
)

func (x ExpectedRevisionConstants) Enum() *ExpectedRevisionConstants {
	p := new(ExpectedRevisionConstants)
	*p = x
	return p
}

func (x ExpectedRevisionConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectedRevisionConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[0].Descriptor()
}

func (ExpectedRevisionConstants) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[0]
}

func (x ExpectedRevisionConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectedRevisionConstants.Descriptor instead.
func (ExpectedRevisionConstants) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{0}
}

// The scope of the read filter determines where the filter will be applied.
type ReadFilterScope int32

const (
	ReadFilterScope_READ_FILTER_SCOPE_UNSPECIFIED ReadFilterScope = 0
	// The filter will be applied to the record stream name
	ReadFilterScope_READ_FILTER_SCOPE_STREAM ReadFilterScope = 1
	// The filter will be applied to the record schema name
	ReadFilterScope_READ_FILTER_SCOPE_SCHEMA_NAME ReadFilterScope = 2
	// The filter will be applied to the properties of the record
	ReadFilterScope_READ_FILTER_SCOPE_PROPERTIES ReadFilterScope = 3
	// The filter will be applied to all the record properties
	// including the stream and schema name
	ReadFilterScope_READ_FILTER_SCOPE_RECORD ReadFilterScope = 4
)

// Enum value maps for ReadFilterScope.
var (
	ReadFilterScope_name = map[int32]string{
		0: "READ_FILTER_SCOPE_UNSPECIFIED",
		1: "READ_FILTER_SCOPE_STREAM",
		2: "READ_FILTER_SCOPE_SCHEMA_NAME",
		3: "READ_FILTER_SCOPE_PROPERTIES",
		4: "READ_FILTER_SCOPE_RECORD",
	}
	ReadFilterScope_value = map[string]int32{
		"READ_FILTER_SCOPE_UNSPECIFIED": 0,
		"READ_FILTER_SCOPE_STREAM":      1,
		"READ_FILTER_SCOPE_SCHEMA_NAME": 2,
		"READ_FILTER_SCOPE_PROPERTIES":  3,
		"READ_FILTER_SCOPE_RECORD":      4,
	}
)

func (x ReadFilterScope) Enum() *ReadFilterScope {
	p := new(ReadFilterScope)
	*p = x
	return p
}

func (x ReadFilterScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadFilterScope) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[1].Descriptor()
}

func (ReadFilterScope) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[1]
}

func (x ReadFilterScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadFilterScope.Descriptor instead.
func (ReadFilterScope) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{1}
}

// The direction in which to read records from the database (forwards or backwards).
type ReadDirection int32

const (
	ReadDirection_READ_DIRECTION_FORWARDS  ReadDirection = 0
	ReadDirection_READ_DIRECTION_BACKWARDS ReadDirection = 1
)

// Enum value maps for ReadDirection.
var (
	ReadDirection_name = map[int32]string{
		0: "READ_DIRECTION_FORWARDS",
		1: "READ_DIRECTION_BACKWARDS",
	}
	ReadDirection_value = map[string]int32{
		"READ_DIRECTION_FORWARDS":  0,
		"READ_DIRECTION_BACKWARDS": 1,
	}
)

func (x ReadDirection) Enum() *ReadDirection {
	p := new(ReadDirection)
	*p = x
	return p
}

func (x ReadDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[2].Descriptor()
}

func (ReadDirection) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[2]
}

func (x ReadDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadDirection.Descriptor instead.
func (ReadDirection) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{2}
}

// The position from which to start reading records.
// This can be either the earliest or latest position in the stream.
type ReadPositionConstants int32

const (
	ReadPositionConstants_READ_POSITION_CONSTANTS_UNSPECIFIED ReadPositionConstants = 0
	ReadPositionConstants_READ_POSITION_CONSTANTS_EARLIEST    ReadPositionConstants = 1
	ReadPositionConstants_READ_POSITION_CONSTANTS_LATEST      ReadPositionConstants = 2
)

// Enum value maps for ReadPositionConstants.
var (
	ReadPositionConstants_name = map[int32]string{
		0: "READ_POSITION_CONSTANTS_UNSPECIFIED",
		1: "READ_POSITION_CONSTANTS_EARLIEST",
		2: "READ_POSITION_CONSTANTS_LATEST",
	}
	ReadPositionConstants_value = map[string]int32{
		"READ_POSITION_CONSTANTS_UNSPECIFIED": 0,
		"READ_POSITION_CONSTANTS_EARLIEST":    1,
		"READ_POSITION_CONSTANTS_LATEST":      2,
	}
)

func (x ReadPositionConstants) Enum() *ReadPositionConstants {
	p := new(ReadPositionConstants)
	*p = x
	return p
}

func (x ReadPositionConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadPositionConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[3].Descriptor()
}

func (ReadPositionConstants) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[3]
}

func (x ReadPositionConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadPositionConstants.Descriptor instead.
func (ReadPositionConstants) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{3}
}

type HeartbeatType int32

const (
	HeartbeatType_HEARTBEAT_TYPE_UNSPECIFIED HeartbeatType = 0
	HeartbeatType_HEARTBEAT_TYPE_CHECKPOINT  HeartbeatType = 1
	HeartbeatType_HEARTBEAT_TYPE_CAUGHT_UP   HeartbeatType = 2
	HeartbeatType_HEARTBEAT_TYPE_FELL_BEHIND HeartbeatType = 3
)

// Enum value maps for HeartbeatType.
var (
	HeartbeatType_name = map[int32]string{
		0: "HEARTBEAT_TYPE_UNSPECIFIED",
		1: "HEARTBEAT_TYPE_CHECKPOINT",
		2: "HEARTBEAT_TYPE_CAUGHT_UP",
		3: "HEARTBEAT_TYPE_FELL_BEHIND",
	}
	HeartbeatType_value = map[string]int32{
		"HEARTBEAT_TYPE_UNSPECIFIED": 0,
		"HEARTBEAT_TYPE_CHECKPOINT":  1,
		"HEARTBEAT_TYPE_CAUGHT_UP":   2,
		"HEARTBEAT_TYPE_FELL_BEHIND": 3,
	}
)

func (x HeartbeatType) Enum() *HeartbeatType {
	p := new(HeartbeatType)
	*p = x
	return p
}

func (x HeartbeatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatType) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[4].Descriptor()
}

func (HeartbeatType) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[4]
}

func (x HeartbeatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatType.Descriptor instead.
func (HeartbeatType) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{4}
}

// Record to be appended to a stream.
type AppendRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Universally Unique identifier for the record.
	// If not provided, the server will generate a new one.
	RecordId *string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// A collection of properties providing additional information about the
	// record. This can include user-defined metadata or system properties.
	// System properties are prefixed with "$." to avoid conflicts with user-defined properties.
	// For example, "$schema.name" or "$schema.data-format".
	Properties map[string]*core.DynamicValue `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The actual data payload of the record, stored as bytes.
	Data          []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendRecord) Reset() {
	*x = AppendRecord{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRecord) ProtoMessage() {}

func (x *AppendRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRecord.ProtoReflect.Descriptor instead.
func (*AppendRecord) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{0}
}

func (x *AppendRecord) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *AppendRecord) GetProperties() map[string]*core.DynamicValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AppendRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents the input for appending records to a specific stream.
type AppendStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to append records to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The records to append to the stream.
	Records []*AppendRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	// The expected revision of the stream. If the stream's current revision does
	// not match, the append will fail.
	// The expected revision can also be one of the special values
	// from ExpectedRevisionConstants.
	// Missing value means no expectation, the same as EXPECTED_REVISION_CONSTANTS_ANY
	ExpectedRevision *int64 `protobuf:"zigzag64,3,opt,name=expected_revision,json=expectedRevision,proto3,oneof" json:"expected_revision,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AppendStreamRequest) Reset() {
	*x = AppendStreamRequest{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamRequest) ProtoMessage() {}

func (x *AppendStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamRequest.ProtoReflect.Descriptor instead.
func (*AppendStreamRequest) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{1}
}

func (x *AppendStreamRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamRequest) GetRecords() []*AppendRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *AppendStreamRequest) GetExpectedRevision() int64 {
	if x != nil && x.ExpectedRevision != nil {
		return *x.ExpectedRevision
	}
	return 0
}

// Success represents the successful outcome of an append operation.
type AppendStreamSuccess struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to which records were appended.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The position of the last appended record in the stream.
	Position int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The expected revision of the stream after the append operation.
	StreamRevision int64 `protobuf:"varint,3,opt,name=stream_revision,json=streamRevision,proto3" json:"stream_revision,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppendStreamSuccess) Reset() {
	*x = AppendStreamSuccess{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamSuccess) ProtoMessage() {}

func (x *AppendStreamSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamSuccess.ProtoReflect.Descriptor instead.
func (*AppendStreamSuccess) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{2}
}

func (x *AppendStreamSuccess) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamSuccess) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AppendStreamSuccess) GetStreamRevision() int64 {
	if x != nil {
		return x.StreamRevision
	}
	return 0
}

// Failure represents the detailed error information when an append operation fails.
type AppendStreamFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to which records were appended.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The error details
	//
	// Types that are valid to be assigned to Error:
	//
	//	*AppendStreamFailure_StreamRevisionConflict
	//	*AppendStreamFailure_AccessDenied
	//	*AppendStreamFailure_StreamDeleted
	//	*AppendStreamFailure_StreamNotFound
	//	*AppendStreamFailure_TransactionMaxSizeExceeded
	Error         isAppendStreamFailure_Error `protobuf_oneof:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendStreamFailure) Reset() {
	*x = AppendStreamFailure{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamFailure) ProtoMessage() {}

func (x *AppendStreamFailure) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamFailure.ProtoReflect.Descriptor instead.
func (*AppendStreamFailure) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{3}
}

func (x *AppendStreamFailure) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamFailure) GetError() isAppendStreamFailure_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AppendStreamFailure) GetStreamRevisionConflict() *shared.ErrorDetails_StreamRevisionConflict {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_StreamRevisionConflict); ok {
			return x.StreamRevisionConflict
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetAccessDenied() *shared.ErrorDetails_AccessDenied {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_AccessDenied); ok {
			return x.AccessDenied
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetStreamDeleted() *shared.ErrorDetails_StreamDeleted {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_StreamDeleted); ok {
			return x.StreamDeleted
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetStreamNotFound() *shared.ErrorDetails_StreamNotFound {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_StreamNotFound); ok {
			return x.StreamNotFound
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetTransactionMaxSizeExceeded() *shared.ErrorDetails_TransactionMaxSizeExceeded {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_TransactionMaxSizeExceeded); ok {
			return x.TransactionMaxSizeExceeded
		}
	}
	return nil
}

type isAppendStreamFailure_Error interface {
	isAppendStreamFailure_Error()
}

type AppendStreamFailure_StreamRevisionConflict struct {
	// Failed because the actual stream revision didn't match the expected revision.
	StreamRevisionConflict *shared.ErrorDetails_StreamRevisionConflict `protobuf:"bytes,2,opt,name=stream_revision_conflict,json=streamRevisionConflict,proto3,oneof"`
}

type AppendStreamFailure_AccessDenied struct {
	// Failed because the client lacks sufficient permissions.
	AccessDenied *shared.ErrorDetails_AccessDenied `protobuf:"bytes,3,opt,name=access_denied,json=accessDenied,proto3,oneof"`
}

type AppendStreamFailure_StreamDeleted struct {
	// Failed because the target stream has been deleted.
	StreamDeleted *shared.ErrorDetails_StreamDeleted `protobuf:"bytes,4,opt,name=stream_deleted,json=streamDeleted,proto3,oneof"`
}

type AppendStreamFailure_StreamNotFound struct {
	// Failed because the stream was not found.
	StreamNotFound *shared.ErrorDetails_StreamNotFound `protobuf:"bytes,5,opt,name=stream_not_found,json=streamNotFound,proto3,oneof"`
}

type AppendStreamFailure_TransactionMaxSizeExceeded struct {
	// Failed because the transaction exceeded the maximum size allowed
	TransactionMaxSizeExceeded *shared.ErrorDetails_TransactionMaxSizeExceeded `protobuf:"bytes,6,opt,name=transaction_max_size_exceeded,json=transactionMaxSizeExceeded,proto3,oneof"`
}

func (*AppendStreamFailure_StreamRevisionConflict) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_AccessDenied) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_StreamDeleted) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_StreamNotFound) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_TransactionMaxSizeExceeded) isAppendStreamFailure_Error() {}

// AppendStreamResponse represents the output of appending records to a specific
// stream.
type AppendStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The result of the append operation.
	//
	// Types that are valid to be assigned to Result:
	//
	//	*AppendStreamResponse_Success
	//	*AppendStreamResponse_Failure
	Result        isAppendStreamResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendStreamResponse) Reset() {
	*x = AppendStreamResponse{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamResponse) ProtoMessage() {}

func (x *AppendStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamResponse.ProtoReflect.Descriptor instead.
func (*AppendStreamResponse) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{4}
}

func (x *AppendStreamResponse) GetResult() isAppendStreamResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AppendStreamResponse) GetSuccess() *AppendStreamSuccess {
	if x != nil {
		if x, ok := x.Result.(*AppendStreamResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *AppendStreamResponse) GetFailure() *AppendStreamFailure {
	if x != nil {
		if x, ok := x.Result.(*AppendStreamResponse_Failure); ok {
			return x.Failure
		}
	}
	return nil
}

type isAppendStreamResponse_Result interface {
	isAppendStreamResponse_Result()
}

type AppendStreamResponse_Success struct {
	// Success represents the successful outcome of an append operation.
	Success *AppendStreamSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type AppendStreamResponse_Failure struct {
	// Failure represents the details of a failed append operation.
	Failure *AppendStreamFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*AppendStreamResponse_Success) isAppendStreamResponse_Result() {}

func (*AppendStreamResponse_Failure) isAppendStreamResponse_Result() {}

// MultiStreamAppendRequest represents a request to append records to multiple streams.
type MultiStreamAppendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of AppendStreamInput messages, each representing a stream to which records should be appended.
	Input         []*AppendStreamRequest `protobuf:"bytes,1,rep,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendRequest) Reset() {
	*x = MultiStreamAppendRequest{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendRequest) ProtoMessage() {}

func (x *MultiStreamAppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendRequest.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendRequest) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{5}
}

func (x *MultiStreamAppendRequest) GetInput() []*AppendStreamRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

// Response from the MultiStreamAppend operation.
type MultiStreamAppendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*MultiStreamAppendResponse_Success_
	//	*MultiStreamAppendResponse_Failure_
	Result        isMultiStreamAppendResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse) Reset() {
	*x = MultiStreamAppendResponse{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse) ProtoMessage() {}

func (x *MultiStreamAppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{6}
}

func (x *MultiStreamAppendResponse) GetResult() isMultiStreamAppendResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MultiStreamAppendResponse) GetSuccess() *MultiStreamAppendResponse_Success {
	if x != nil {
		if x, ok := x.Result.(*MultiStreamAppendResponse_Success_); ok {
			return x.Success
		}
	}
	return nil
}

func (x *MultiStreamAppendResponse) GetFailure() *MultiStreamAppendResponse_Failure {
	if x != nil {
		if x, ok := x.Result.(*MultiStreamAppendResponse_Failure_); ok {
			return x.Failure
		}
	}
	return nil
}

type isMultiStreamAppendResponse_Result interface {
	isMultiStreamAppendResponse_Result()
}

type MultiStreamAppendResponse_Success_ struct {
	// Success represents the successful outcome of a multi-stream append operation.
	Success *MultiStreamAppendResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type MultiStreamAppendResponse_Failure_ struct {
	// Failure represents the details of a failed multi-stream append operation.
	Failure *MultiStreamAppendResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*MultiStreamAppendResponse_Success_) isMultiStreamAppendResponse_Result() {}

func (*MultiStreamAppendResponse_Failure_) isMultiStreamAppendResponse_Result() {}

// The filter to apply when reading records from the database
// The combination of stream scope and literal expression indicates a direct stream name match,
// while a regex expression indicates a pattern match across multiple streams.
type ReadFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The scope of the filter.
	Scope ReadFilterScope `protobuf:"varint,1,opt,name=scope,proto3,enum=kurrentdb.protocol.v2.ReadFilterScope" json:"scope,omitempty"`
	// The expression can be a regular expression or a literal value.
	// If it starts with "~" it will be considered a regex.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// The optional property names to filter on.
	PropertyNames []string `protobuf:"bytes,4,rep,name=property_names,json=propertyNames,proto3" json:"property_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFilter) Reset() {
	*x = ReadFilter{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilter) ProtoMessage() {}

func (x *ReadFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilter.ProtoReflect.Descriptor instead.
func (*ReadFilter) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{7}
}

func (x *ReadFilter) GetScope() ReadFilterScope {
	if x != nil {
		return x.Scope
	}
	return ReadFilterScope_READ_FILTER_SCOPE_UNSPECIFIED
}

func (x *ReadFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ReadFilter) GetPropertyNames() []string {
	if x != nil {
		return x.PropertyNames
	}
	return nil
}

// Record retrieved from the database.
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the record in the database.
	RecordId string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// The position of the record in the database.
	Position int64 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	// The actual data payload of the record, stored as bytes.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Additional information about the record.
	Properties map[string]*core.DynamicValue `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// When the record was created.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The stream to which the record belongs.
	Stream *string `protobuf:"bytes,6,opt,name=stream,proto3,oneof" json:"stream,omitempty"`
	// The revision of the stream created when the record was appended.
	StreamRevision *int64 `protobuf:"varint,7,opt,name=stream_revision,json=streamRevision,proto3,oneof" json:"stream_revision,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{8}
}

func (x *Record) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *Record) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Record) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Record) GetProperties() map[string]*core.DynamicValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Record) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Record) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

func (x *Record) GetStreamRevision() int64 {
	if x != nil && x.StreamRevision != nil {
		return *x.StreamRevision
	}
	return 0
}

// Represents the successful outcome of a read operation.
type ReadSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Record              `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadSuccess) Reset() {
	*x = ReadSuccess{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSuccess) ProtoMessage() {}

func (x *ReadSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSuccess.ProtoReflect.Descriptor instead.
func (*ReadSuccess) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{9}
}

func (x *ReadSuccess) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

// Represents the detailed error information when a read operation fails.
type ReadFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error details
	//
	// Types that are valid to be assigned to Error:
	//
	//	*ReadFailure_AccessDenied
	//	*ReadFailure_StreamDeleted
	//	*ReadFailure_StreamNotFound
	Error         isReadFailure_Error `protobuf_oneof:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFailure) Reset() {
	*x = ReadFailure{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFailure) ProtoMessage() {}

func (x *ReadFailure) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFailure.ProtoReflect.Descriptor instead.
func (*ReadFailure) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{10}
}

func (x *ReadFailure) GetError() isReadFailure_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReadFailure) GetAccessDenied() *shared.ErrorDetails_AccessDenied {
	if x != nil {
		if x, ok := x.Error.(*ReadFailure_AccessDenied); ok {
			return x.AccessDenied
		}
	}
	return nil
}

func (x *ReadFailure) GetStreamDeleted() *shared.ErrorDetails_StreamDeleted {
	if x != nil {
		if x, ok := x.Error.(*ReadFailure_StreamDeleted); ok {
			return x.StreamDeleted
		}
	}
	return nil
}

func (x *ReadFailure) GetStreamNotFound() *shared.ErrorDetails_StreamNotFound {
	if x != nil {
		if x, ok := x.Error.(*ReadFailure_StreamNotFound); ok {
			return x.StreamNotFound
		}
	}
	return nil
}

type isReadFailure_Error interface {
	isReadFailure_Error()
}

type ReadFailure_AccessDenied struct {
	// Failed because the client lacks sufficient permissions.
	AccessDenied *shared.ErrorDetails_AccessDenied `protobuf:"bytes,1,opt,name=access_denied,json=accessDenied,proto3,oneof"`
}

type ReadFailure_StreamDeleted struct {
	// Failed because the target stream has been deleted.
	StreamDeleted *shared.ErrorDetails_StreamDeleted `protobuf:"bytes,2,opt,name=stream_deleted,json=streamDeleted,proto3,oneof"`
}

type ReadFailure_StreamNotFound struct {
	// Failed because the expected stream revision did not match the actual revision.
	StreamNotFound *shared.ErrorDetails_StreamNotFound `protobuf:"bytes,3,opt,name=stream_not_found,json=streamNotFound,proto3,oneof"`
}

func (*ReadFailure_AccessDenied) isReadFailure_Error() {}

func (*ReadFailure_StreamDeleted) isReadFailure_Error() {}

func (*ReadFailure_StreamNotFound) isReadFailure_Error() {}

type ReadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The filter to apply when reading records.
	Filter *ReadFilter `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The starting position of the log from which to read records.
	StartPosition *int64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3,oneof" json:"start_position,omitempty"`
	// Limit how many records can be returned.
	// This will get capped at the default limit,
	// which is up to 1000 records.
	Limit *int64 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// The direction in which to read the stream (forwards or backwards).
	Direction ReadDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=kurrentdb.protocol.v2.ReadDirection" json:"direction,omitempty"`
	// Heartbeats can be enabled to monitor end-to-end session health.
	Heartbeats *HeartbeatOptions `protobuf:"bytes,5,opt,name=heartbeats,proto3" json:"heartbeats,omitempty"`
	// The number of records to read in a single batch.
	BatchSize     int32 `protobuf:"varint,6,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{11}
}

func (x *ReadRequest) GetFilter() *ReadFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReadRequest) GetStartPosition() int64 {
	if x != nil && x.StartPosition != nil {
		return *x.StartPosition
	}
	return 0
}

func (x *ReadRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ReadRequest) GetDirection() ReadDirection {
	if x != nil {
		return x.Direction
	}
	return ReadDirection_READ_DIRECTION_FORWARDS
}

func (x *ReadRequest) GetHeartbeats() *HeartbeatOptions {
	if x != nil {
		return x.Heartbeats
	}
	return nil
}

func (x *ReadRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Read session response.
type ReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*ReadResponse_Success
	//	*ReadResponse_Failure
	//	*ReadResponse_Heartbeat
	Result        isReadResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{12}
}

func (x *ReadResponse) GetResult() isReadResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReadResponse) GetSuccess() *ReadSuccess {
	if x != nil {
		if x, ok := x.Result.(*ReadResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *ReadResponse) GetFailure() *ReadFailure {
	if x != nil {
		if x, ok := x.Result.(*ReadResponse_Failure); ok {
			return x.Failure
		}
	}
	return nil
}

func (x *ReadResponse) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Result.(*ReadResponse_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isReadResponse_Result interface {
	isReadResponse_Result()
}

type ReadResponse_Success struct {
	// Success represents the successful outcome of an read operation.
	Success *ReadSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type ReadResponse_Failure struct {
	// Failure represents the details of a failed read operation.
	Failure *ReadFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type ReadResponse_Heartbeat struct {
	// Heartbeat represents the health check of the read operation when
	// the server has not found any records matching the filter for the specified
	// period of time or records threshold.
	// A heartbeat will be sent when the initial switch to real-time tailing happens.
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*ReadResponse_Success) isReadResponse_Result() {}

func (*ReadResponse_Failure) isReadResponse_Result() {}

func (*ReadResponse_Heartbeat) isReadResponse_Result() {}

// A health check will be sent when the server has not found any records
// matching the filter for the specified period of time or records threshold. A
// heartbeat will be sent when the initial switch to real-time tailing happens.
type HeartbeatOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Enable           bool                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Period           *durationpb.Duration   `protobuf:"bytes,2,opt,name=period,proto3,oneof" json:"period,omitempty"`                                              // 30 seconds
	RecordsThreshold *int32                 `protobuf:"varint,3,opt,name=records_threshold,json=recordsThreshold,proto3,oneof" json:"records_threshold,omitempty"` // 500
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HeartbeatOptions) Reset() {
	*x = HeartbeatOptions{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatOptions) ProtoMessage() {}

func (x *HeartbeatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatOptions.ProtoReflect.Descriptor instead.
func (*HeartbeatOptions) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{13}
}

func (x *HeartbeatOptions) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *HeartbeatOptions) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *HeartbeatOptions) GetRecordsThreshold() int32 {
	if x != nil && x.RecordsThreshold != nil {
		return *x.RecordsThreshold
	}
	return 0
}

type Heartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This indicates whether the subscription is caught up, fell behind, or
	// the filter has not been satisfied after a period of time or records threshold.
	Type HeartbeatType `protobuf:"varint,1,opt,name=type,proto3,enum=kurrentdb.protocol.v2.HeartbeatType" json:"type,omitempty"`
	// Checkpoint for resuming reads.
	// It will always be populated unless the database is empty.
	Position int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// When the heartbeat was sent.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{14}
}

func (x *Heartbeat) GetType() HeartbeatType {
	if x != nil {
		return x.Type
	}
	return HeartbeatType_HEARTBEAT_TYPE_UNSPECIFIED
}

func (x *Heartbeat) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Heartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type MultiStreamAppendResponse_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []*AppendStreamSuccess `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse_Success) Reset() {
	*x = MultiStreamAppendResponse_Success{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse_Success) ProtoMessage() {}

func (x *MultiStreamAppendResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse_Success.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse_Success) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MultiStreamAppendResponse_Success) GetOutput() []*AppendStreamSuccess {
	if x != nil {
		return x.Output
	}
	return nil
}

type MultiStreamAppendResponse_Failure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []*AppendStreamFailure `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse_Failure) Reset() {
	*x = MultiStreamAppendResponse_Failure{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse_Failure) ProtoMessage() {}

func (x *MultiStreamAppendResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse_Failure.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse_Failure) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{6, 1}
}

func (x *MultiStreamAppendResponse_Failure) GetOutput() []*AppendStreamFailure {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_kurrentdb_protocols_v2_streams_streams_proto protoreflect.FileDescriptor

const file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc = "" +
	"\n" +
	",kurrentdb/protocols/v2/streams/streams.proto\x12\x15kurrentdb.protocol.v2\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/descriptor.proto\x1a+kurrentdb/protocols/v2/streams/shared.proto\x1a!kurrentdb/protocols/v2/core.proto\"\x88\x02\n" +
	"\fAppendRecord\x12 \n" +
	"\trecord_id\x18\x01 \x01(\tH\x00R\brecordId\x88\x01\x01\x12S\n" +
	"\n" +
	"properties\x18\x02 \x03(\v23.kurrentdb.protocol.v2.AppendRecord.PropertiesEntryR\n" +
	"properties\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x1a_\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .kurrentdb.protocol.DynamicValueR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_record_id\"\xb8\x01\n" +
	"\x13AppendStreamRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12=\n" +
	"\arecords\x18\x02 \x03(\v2#.kurrentdb.protocol.v2.AppendRecordR\arecords\x124\n" +
	"\x11expected_revision\x18\x03 \x01(\x12B\x020\x01H\x00R\x10expectedRevision\x88\x01\x01B\x14\n" +
	"\x12_expected_revision\"z\n" +
	"\x13AppendStreamSuccess\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12\x1e\n" +
	"\bposition\x18\x02 \x01(\x03B\x020\x01R\bposition\x12+\n" +
	"\x0fstream_revision\x18\x03 \x01(\x03B\x020\x01R\x0estreamRevision\"\xc9\x04\n" +
	"\x13AppendStreamFailure\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12v\n" +
	"\x18stream_revision_conflict\x18\x02 \x01(\v2:.kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflictH\x00R\x16streamRevisionConflict\x12W\n" +
	"\raccess_denied\x18\x03 \x01(\v20.kurrentdb.protocol.v2.ErrorDetails.AccessDeniedH\x00R\faccessDenied\x12Z\n" +
	"\x0estream_deleted\x18\x04 \x01(\v21.kurrentdb.protocol.v2.ErrorDetails.StreamDeletedH\x00R\rstreamDeleted\x12^\n" +
	"\x10stream_not_found\x18\x05 \x01(\v22.kurrentdb.protocol.v2.ErrorDetails.StreamNotFoundH\x00R\x0estreamNotFound\x12\x83\x01\n" +
	"\x1dtransaction_max_size_exceeded\x18\x06 \x01(\v2>.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceededH\x00R\x1atransactionMaxSizeExceededB\a\n" +
	"\x05error\"\xb0\x01\n" +
	"\x14AppendStreamResponse\x12F\n" +
	"\asuccess\x18\x01 \x01(\v2*.kurrentdb.protocol.v2.AppendStreamSuccessH\x00R\asuccess\x12F\n" +
	"\afailure\x18\x02 \x01(\v2*.kurrentdb.protocol.v2.AppendStreamFailureH\x00R\afailureB\b\n" +
	"\x06result\"\\\n" +
	"\x18MultiStreamAppendRequest\x12@\n" +
	"\x05input\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamRequestR\x05input\"\xef\x02\n" +
	"\x19MultiStreamAppendResponse\x12T\n" +
	"\asuccess\x18\x01 \x01(\v28.kurrentdb.protocol.v2.MultiStreamAppendResponse.SuccessH\x00R\asuccess\x12T\n" +
	"\afailure\x18\x02 \x01(\v28.kurrentdb.protocol.v2.MultiStreamAppendResponse.FailureH\x00R\afailure\x1aM\n" +
	"\aSuccess\x12B\n" +
	"\x06output\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamSuccessR\x06output\x1aM\n" +
	"\aFailure\x12B\n" +
	"\x06output\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamFailureR\x06outputB\b\n" +
	"\x06result\"\x91\x01\n" +
	"\n" +
	"ReadFilter\x12<\n" +
	"\x05scope\x18\x01 \x01(\x0e2&.kurrentdb.protocol.v2.ReadFilterScopeR\x05scope\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\x12%\n" +
	"\x0eproperty_names\x18\x04 \x03(\tR\rpropertyNames\"\xb1\x03\n" +
	"\x06Record\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\tR\brecordId\x12\x1e\n" +
	"\bposition\x18\x05 \x01(\x03B\x020\x01R\bposition\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12M\n" +
	"\n" +
	"properties\x18\x03 \x03(\v2-.kurrentdb.protocol.v2.Record.PropertiesEntryR\n" +
	"properties\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1b\n" +
	"\x06stream\x18\x06 \x01(\tH\x00R\x06stream\x88\x01\x01\x120\n" +
	"\x0fstream_revision\x18\a \x01(\x03B\x020\x01H\x01R\x0estreamRevision\x88\x01\x01\x1a_\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .kurrentdb.protocol.DynamicValueR\x05value:\x028\x01B\t\n" +
	"\a_streamB\x12\n" +
	"\x10_stream_revision\"F\n" +
	"\vReadSuccess\x127\n" +
	"\arecords\x18\x01 \x03(\v2\x1d.kurrentdb.protocol.v2.RecordR\arecords\"\xab\x02\n" +
	"\vReadFailure\x12W\n" +
	"\raccess_denied\x18\x01 \x01(\v20.kurrentdb.protocol.v2.ErrorDetails.AccessDeniedH\x00R\faccessDenied\x12Z\n" +
	"\x0estream_deleted\x18\x02 \x01(\v21.kurrentdb.protocol.v2.ErrorDetails.StreamDeletedH\x00R\rstreamDeleted\x12^\n" +
	"\x10stream_not_found\x18\x03 \x01(\v22.kurrentdb.protocol.v2.ErrorDetails.StreamNotFoundH\x00R\x0estreamNotFoundB\a\n" +
	"\x05error\"\xf0\x02\n" +
	"\vReadRequest\x12>\n" +
	"\x06filter\x18\x01 \x01(\v2!.kurrentdb.protocol.v2.ReadFilterH\x00R\x06filter\x88\x01\x01\x12.\n" +
	"\x0estart_position\x18\x02 \x01(\x03B\x020\x01H\x01R\rstartPosition\x88\x01\x01\x12\x1d\n" +
	"\x05limit\x18\x03 \x01(\x03B\x020\x01H\x02R\x05limit\x88\x01\x01\x12B\n" +
	"\tdirection\x18\x04 \x01(\x0e2$.kurrentdb.protocol.v2.ReadDirectionR\tdirection\x12G\n" +
	"\n" +
	"heartbeats\x18\x05 \x01(\v2'.kurrentdb.protocol.v2.HeartbeatOptionsR\n" +
	"heartbeats\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x06 \x01(\x05R\tbatchSizeB\t\n" +
	"\a_filterB\x11\n" +
	"\x0f_start_positionB\b\n" +
	"\x06_limit\"\xda\x01\n" +
	"\fReadResponse\x12>\n" +
	"\asuccess\x18\x01 \x01(\v2\".kurrentdb.protocol.v2.ReadSuccessH\x00R\asuccess\x12>\n" +
	"\afailure\x18\x02 \x01(\v2\".kurrentdb.protocol.v2.ReadFailureH\x00R\afailure\x12@\n" +
	"\theartbeat\x18\x03 \x01(\v2 .kurrentdb.protocol.v2.HeartbeatH\x00R\theartbeatB\b\n" +
	"\x06result\"\xb5\x01\n" +
	"\x10HeartbeatOptions\x12\x16\n" +
	"\x06enable\x18\x01 \x01(\bR\x06enable\x126\n" +
	"\x06period\x18\x02 \x01(\v2\x19.google.protobuf.DurationH\x00R\x06period\x88\x01\x01\x120\n" +
	"\x11records_threshold\x18\x03 \x01(\x05H\x01R\x10recordsThreshold\x88\x01\x01B\t\n" +
	"\a_periodB\x14\n" +
	"\x12_records_threshold\"\x9f\x01\n" +
	"\tHeartbeat\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.kurrentdb.protocol.v2.HeartbeatTypeR\x04type\x12\x1e\n" +
	"\bposition\x18\x02 \x01(\x03B\x020\x01R\bposition\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp*\xdc\x01\n" +
	"\x19ExpectedRevisionConstants\x12,\n" +
	"(EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT\x10\x00\x12,\n" +
	"\x1fEXPECTED_REVISION_CONSTANTS_ANY\x10\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x01\x122\n" +
	"%EXPECTED_REVISION_CONSTANTS_NO_STREAM\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12/\n" +
	"\"EXPECTED_REVISION_CONSTANTS_EXISTS\x10\xfc\xff\xff\xff\xff\xff\xff\xff\xff\x01*\xb5\x01\n" +
	"\x0fReadFilterScope\x12!\n" +
	"\x1dREAD_FILTER_SCOPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18READ_FILTER_SCOPE_STREAM\x10\x01\x12!\n" +
	"\x1dREAD_FILTER_SCOPE_SCHEMA_NAME\x10\x02\x12 \n" +
	"\x1cREAD_FILTER_SCOPE_PROPERTIES\x10\x03\x12\x1c\n" +
	"\x18READ_FILTER_SCOPE_RECORD\x10\x04*J\n" +
	"\rReadDirection\x12\x1b\n" +
	"\x17READ_DIRECTION_FORWARDS\x10\x00\x12\x1c\n" +
	"\x18READ_DIRECTION_BACKWARDS\x10\x01*\x8a\x01\n" +
	"\x15ReadPositionConstants\x12'\n" +
	"#READ_POSITION_CONSTANTS_UNSPECIFIED\x10\x00\x12$\n" +
	" READ_POSITION_CONSTANTS_EARLIEST\x10\x01\x12\"\n" +
	"\x1eREAD_POSITION_CONSTANTS_LATEST\x10\x02*\x8c\x01\n" +
	"\rHeartbeatType\x12\x1e\n" +
	"\x1aHEARTBEAT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19HEARTBEAT_TYPE_CHECKPOINT\x10\x01\x12\x1c\n" +
	"\x18HEARTBEAT_TYPE_CAUGHT_UP\x10\x02\x12\x1e\n" +
	"\x1aHEARTBEAT_TYPE_FELL_BEHIND\x10\x032\xde\x02\n" +
	"\x0eStreamsService\x12v\n" +
	"\x11MultiStreamAppend\x12/.kurrentdb.protocol.v2.MultiStreamAppendRequest\x1a0.kurrentdb.protocol.v2.MultiStreamAppendResponse\x12z\n" +
	"\x18MultiStreamAppendSession\x12*.kurrentdb.protocol.v2.AppendStreamRequest\x1a0.kurrentdb.protocol.v2.MultiStreamAppendResponse(\x01\x12X\n" +
	"\vReadSession\x12\".kurrentdb.protocol.v2.ReadRequest\x1a#.kurrentdb.protocol.v2.ReadResponse0\x01B\x9d\x01\n" +
	" io.kurrentdb.protocol.streams.v2P\x01ZWgithub.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/streams/streams\xaa\x02\x1dKurrentDB.Protocol.Streams.V2b\x06proto3"

var (
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescOnce sync.Once
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData []byte
)

func file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP() []byte {
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescOnce.Do(func() {
		file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc)))
	})
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData
}

var file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_kurrentdb_protocols_v2_streams_streams_proto_goTypes = []any{
	(ExpectedRevisionConstants)(0),            // 0: kurrentdb.protocol.v2.ExpectedRevisionConstants
	(ReadFilterScope)(0),                      // 1: kurrentdb.protocol.v2.ReadFilterScope
	(ReadDirection)(0),                        // 2: kurrentdb.protocol.v2.ReadDirection
	(ReadPositionConstants)(0),                // 3: kurrentdb.protocol.v2.ReadPositionConstants
	(HeartbeatType)(0),                        // 4: kurrentdb.protocol.v2.HeartbeatType
	(*AppendRecord)(nil),                      // 5: kurrentdb.protocol.v2.AppendRecord
	(*AppendStreamRequest)(nil),               // 6: kurrentdb.protocol.v2.AppendStreamRequest
	(*AppendStreamSuccess)(nil),               // 7: kurrentdb.protocol.v2.AppendStreamSuccess
	(*AppendStreamFailure)(nil),               // 8: kurrentdb.protocol.v2.AppendStreamFailure
	(*AppendStreamResponse)(nil),              // 9: kurrentdb.protocol.v2.AppendStreamResponse
	(*MultiStreamAppendRequest)(nil),          // 10: kurrentdb.protocol.v2.MultiStreamAppendRequest
	(*MultiStreamAppendResponse)(nil),         // 11: kurrentdb.protocol.v2.MultiStreamAppendResponse
	(*ReadFilter)(nil),                        // 12: kurrentdb.protocol.v2.ReadFilter
	(*Record)(nil),                            // 13: kurrentdb.protocol.v2.Record
	(*ReadSuccess)(nil),                       // 14: kurrentdb.protocol.v2.ReadSuccess
	(*ReadFailure)(nil),                       // 15: kurrentdb.protocol.v2.ReadFailure
	(*ReadRequest)(nil),                       // 16: kurrentdb.protocol.v2.ReadRequest
	(*ReadResponse)(nil),                      // 17: kurrentdb.protocol.v2.ReadResponse
	(*HeartbeatOptions)(nil),                  // 18: kurrentdb.protocol.v2.HeartbeatOptions
	(*Heartbeat)(nil),                         // 19: kurrentdb.protocol.v2.Heartbeat
	nil,                                       // 20: kurrentdb.protocol.v2.AppendRecord.PropertiesEntry
	(*MultiStreamAppendResponse_Success)(nil), // 21: kurrentdb.protocol.v2.MultiStreamAppendResponse.Success
	(*MultiStreamAppendResponse_Failure)(nil), // 22: kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure
	nil, // 23: kurrentdb.protocol.v2.Record.PropertiesEntry
	(*shared.ErrorDetails_StreamRevisionConflict)(nil),     // 24: kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflict
	(*shared.ErrorDetails_AccessDenied)(nil),               // 25: kurrentdb.protocol.v2.ErrorDetails.AccessDenied
	(*shared.ErrorDetails_StreamDeleted)(nil),              // 26: kurrentdb.protocol.v2.ErrorDetails.StreamDeleted
	(*shared.ErrorDetails_StreamNotFound)(nil),             // 27: kurrentdb.protocol.v2.ErrorDetails.StreamNotFound
	(*shared.ErrorDetails_TransactionMaxSizeExceeded)(nil), // 28: kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded
	(*timestamppb.Timestamp)(nil),                          // 29: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                            // 30: google.protobuf.Duration
	(*core.DynamicValue)(nil),                              // 31: kurrentdb.protocol.DynamicValue
}
var file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs = []int32{
	20, // 0: kurrentdb.protocol.v2.AppendRecord.properties:type_name -> kurrentdb.protocol.v2.AppendRecord.PropertiesEntry
	5,  // 1: kurrentdb.protocol.v2.AppendStreamRequest.records:type_name -> kurrentdb.protocol.v2.AppendRecord
	24, // 2: kurrentdb.protocol.v2.AppendStreamFailure.stream_revision_conflict:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamRevisionConflict
	25, // 3: kurrentdb.protocol.v2.AppendStreamFailure.access_denied:type_name -> kurrentdb.protocol.v2.ErrorDetails.AccessDenied
	26, // 4: kurrentdb.protocol.v2.AppendStreamFailure.stream_deleted:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamDeleted
	27, // 5: kurrentdb.protocol.v2.AppendStreamFailure.stream_not_found:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamNotFound
	28, // 6: kurrentdb.protocol.v2.AppendStreamFailure.transaction_max_size_exceeded:type_name -> kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded
	7,  // 7: kurrentdb.protocol.v2.AppendStreamResponse.success:type_name -> kurrentdb.protocol.v2.AppendStreamSuccess
	8,  // 8: kurrentdb.protocol.v2.AppendStreamResponse.failure:type_name -> kurrentdb.protocol.v2.AppendStreamFailure
	6,  // 9: kurrentdb.protocol.v2.MultiStreamAppendRequest.input:type_name -> kurrentdb.protocol.v2.AppendStreamRequest
	21, // 10: kurrentdb.protocol.v2.MultiStreamAppendResponse.success:type_name -> kurrentdb.protocol.v2.MultiStreamAppendResponse.Success
	22, // 11: kurrentdb.protocol.v2.MultiStreamAppendResponse.failure:type_name -> kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure
	1,  // 12: kurrentdb.protocol.v2.ReadFilter.scope:type_name -> kurrentdb.protocol.v2.ReadFilterScope
	23, // 13: kurrentdb.protocol.v2.Record.properties:type_name -> kurrentdb.protocol.v2.Record.PropertiesEntry
	29, // 14: kurrentdb.protocol.v2.Record.timestamp:type_name -> google.protobuf.Timestamp
	13, // 15: kurrentdb.protocol.v2.ReadSuccess.records:type_name -> kurrentdb.protocol.v2.Record
	25, // 16: kurrentdb.protocol.v2.ReadFailure.access_denied:type_name -> kurrentdb.protocol.v2.ErrorDetails.AccessDenied
	26, // 17: kurrentdb.protocol.v2.ReadFailure.stream_deleted:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamDeleted
	27, // 18: kurrentdb.protocol.v2.ReadFailure.stream_not_found:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamNotFound
	12, // 19: kurrentdb.protocol.v2.ReadRequest.filter:type_name -> kurrentdb.protocol.v2.ReadFilter
	2,  // 20: kurrentdb.protocol.v2.ReadRequest.direction:type_name -> kurrentdb.protocol.v2.ReadDirection
	18, // 21: kurrentdb.protocol.v2.ReadRequest.heartbeats:type_name -> kurrentdb.protocol.v2.HeartbeatOptions
	14, // 22: kurrentdb.protocol.v2.ReadResponse.success:type_name -> kurrentdb.protocol.v2.ReadSuccess
	15, // 23: kurrentdb.protocol.v2.ReadResponse.failure:type_name -> kurrentdb.protocol.v2.ReadFailure
	19, // 24: kurrentdb.protocol.v2.ReadResponse.heartbeat:type_name -> kurrentdb.protocol.v2.Heartbeat
	30, // 25: kurrentdb.protocol.v2.HeartbeatOptions.period:type_name -> google.protobuf.Duration
	4,  // 26: kurrentdb.protocol.v2.Heartbeat.type:type_name -> kurrentdb.protocol.v2.HeartbeatType
	29, // 27: kurrentdb.protocol.v2.Heartbeat.timestamp:type_name -> google.protobuf.Timestamp
	31, // 28: kurrentdb.protocol.v2.AppendRecord.PropertiesEntry.value:type_name -> kurrentdb.protocol.DynamicValue
	7,  // 29: kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.output:type_name -> kurrentdb.protocol.v2.AppendStreamSuccess
	8,  // 30: kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.output:type_name -> kurrentdb.protocol.v2.AppendStreamFailure
	31, // 31: kurrentdb.protocol.v2.Record.PropertiesEntry.value:type_name -> kurrentdb.protocol.DynamicValue
	10, // 32: kurrentdb.protocol.v2.StreamsService.MultiStreamAppend:input_type -> kurrentdb.protocol.v2.MultiStreamAppendRequest
	6,  // 33: kurrentdb.protocol.v2.StreamsService.MultiStreamAppendSession:input_type -> kurrentdb.protocol.v2.AppendStreamRequest
	16, // 34: kurrentdb.protocol.v2.StreamsService.ReadSession:input_type -> kurrentdb.protocol.v2.ReadRequest
	11, // 35: kurrentdb.protocol.v2.StreamsService.MultiStreamAppend:output_type -> kurrentdb.protocol.v2.MultiStreamAppendResponse
	11, // 36: kurrentdb.protocol.v2.StreamsService.MultiStreamAppendSession:output_type -> kurrentdb.protocol.v2.MultiStreamAppendResponse
	17, // 37: kurrentdb.protocol.v2.StreamsService.ReadSession:output_type -> kurrentdb.protocol.v2.ReadResponse
	35, // [35:38] is the sub-list for method output_type
	32, // [32:35] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_kurrentdb_protocols_v2_streams_streams_proto_init() }
func file_kurrentdb_protocols_v2_streams_streams_proto_init() {
	if File_kurrentdb_protocols_v2_streams_streams_proto != nil {
		return
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3].OneofWrappers = []any{
		(*AppendStreamFailure_StreamRevisionConflict)(nil),
		(*AppendStreamFailure_AccessDenied)(nil),
		(*AppendStreamFailure_StreamDeleted)(nil),
		(*AppendStreamFailure_StreamNotFound)(nil),
		(*AppendStreamFailure_TransactionMaxSizeExceeded)(nil),
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4].OneofWrappers = []any{
		(*AppendStreamResponse_Success)(nil),
		(*AppendStreamResponse_Failure)(nil),
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[6].OneofWrappers = []any{
		(*MultiStreamAppendResponse_Success_)(nil),
		(*MultiStreamAppendResponse_Failure_)(nil),
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[8].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[10].OneofWrappers = []any{
		(*ReadFailure_AccessDenied)(nil),
		(*ReadFailure_StreamDeleted)(nil),
		(*ReadFailure_StreamNotFound)(nil),
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[11].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[12].OneofWrappers = []any{
		(*ReadResponse_Success)(nil),
		(*ReadResponse_Failure)(nil),
		(*ReadResponse_Heartbeat)(nil),
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kurrentdb_protocols_v2_streams_streams_proto_goTypes,
		DependencyIndexes: file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs,
		EnumInfos:         file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes,
		MessageInfos:      file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes,
	}.Build()
	File_kurrentdb_protocols_v2_streams_streams_proto = out.File
	file_kurrentdb_protocols_v2_streams_streams_proto_goTypes = nil
	file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs = nil
}
