// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.26.0
// source: kurrentdb/protocols/v2/streams/streams.proto

package streams

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the data format of the schema.
type SchemaFormat int32

const (
	// Default value, should not be used.
	SchemaFormat_SCHEMA_FORMAT_UNSPECIFIED SchemaFormat = 0
	SchemaFormat_SCHEMA_FORMAT_JSON        SchemaFormat = 1
	SchemaFormat_SCHEMA_FORMAT_PROTOBUF    SchemaFormat = 2
	SchemaFormat_SCHEMA_FORMAT_AVRO        SchemaFormat = 3
	SchemaFormat_SCHEMA_FORMAT_BYTES       SchemaFormat = 4
)

// Enum value maps for SchemaFormat.
var (
	SchemaFormat_name = map[int32]string{
		0: "SCHEMA_FORMAT_UNSPECIFIED",
		1: "SCHEMA_FORMAT_JSON",
		2: "SCHEMA_FORMAT_PROTOBUF",
		3: "SCHEMA_FORMAT_AVRO",
		4: "SCHEMA_FORMAT_BYTES",
	}
	SchemaFormat_value = map[string]int32{
		"SCHEMA_FORMAT_UNSPECIFIED": 0,
		"SCHEMA_FORMAT_JSON":        1,
		"SCHEMA_FORMAT_PROTOBUF":    2,
		"SCHEMA_FORMAT_AVRO":        3,
		"SCHEMA_FORMAT_BYTES":       4,
	}
)

func (x SchemaFormat) Enum() *SchemaFormat {
	p := new(SchemaFormat)
	*p = x
	return p
}

func (x SchemaFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[0].Descriptor()
}

func (SchemaFormat) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[0]
}

func (x SchemaFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaFormat.Descriptor instead.
func (SchemaFormat) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{0}
}

// Constants for expected revision validation in optimistic concurrency control.
// These can be used in the expected_revision field, or you can specify an actual revision number.
type ExpectedRevisionConstants int32

const (
	// The stream must have exactly one event at revision 0.
	// Used for scenarios requiring strict single-event semantics.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT ExpectedRevisionConstants = 0
	// The stream must not exist yet (first write to the stream).
	// Fails if the stream already has events.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_NO_STREAM ExpectedRevisionConstants = -1
	// Accept any current state of the stream (no optimistic concurrency check).
	// The write will succeed regardless of the stream's current revision.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_ANY ExpectedRevisionConstants = -2
	// The stream must exist (have at least one record).
	// Fails if the stream doesn't exist yet.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_EXISTS ExpectedRevisionConstants = -4
)

// Enum value maps for ExpectedRevisionConstants.
var (
	ExpectedRevisionConstants_name = map[int32]string{
		0:  "EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT",
		-1: "EXPECTED_REVISION_CONSTANTS_NO_STREAM",
		-2: "EXPECTED_REVISION_CONSTANTS_ANY",
		-4: "EXPECTED_REVISION_CONSTANTS_EXISTS",
	}
	ExpectedRevisionConstants_value = map[string]int32{
		"EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT": 0,
		"EXPECTED_REVISION_CONSTANTS_NO_STREAM":    -1,
		"EXPECTED_REVISION_CONSTANTS_ANY":          -2,
		"EXPECTED_REVISION_CONSTANTS_EXISTS":       -4,
	}
)

func (x ExpectedRevisionConstants) Enum() *ExpectedRevisionConstants {
	p := new(ExpectedRevisionConstants)
	*p = x
	return p
}

func (x ExpectedRevisionConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectedRevisionConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[1].Descriptor()
}

func (ExpectedRevisionConstants) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes[1]
}

func (x ExpectedRevisionConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectedRevisionConstants.Descriptor instead.
func (ExpectedRevisionConstants) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{1}
}

// Represents the input for appending records to a specific stream.
type AppendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The stream to append records to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The records to append to the stream.
	Records []*AppendRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	// The expected revision for optimistic concurrency control.
	// Can be either:
	// - A specific revision number (0, 1, 2, ...) - the stream must be at exactly this revision
	// - An ExpectedRevisionConstants value (-4, -2, -1) for special semantics
	//
	// If omitted, defaults to EXPECTED_REVISION_CONSTANTS_ANY (-2).
	ExpectedRevision *int64 `protobuf:"zigzag64,3,opt,name=expected_revision,json=expectedRevision,proto3,oneof" json:"expected_revision,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AppendRequest) Reset() {
	*x = AppendRequest{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRequest) ProtoMessage() {}

func (x *AppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRequest.ProtoReflect.Descriptor instead.
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{0}
}

func (x *AppendRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendRequest) GetRecords() []*AppendRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *AppendRequest) GetExpectedRevision() int64 {
	if x != nil && x.ExpectedRevision != nil {
		return *x.ExpectedRevision
	}
	return 0
}

// Represents the outcome of an append operation.
type AppendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The stream to which records were appended.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The actual/current revision of the stream after the append.
	// This is the revision number of the last record written to this stream.
	StreamRevision int64 `protobuf:"zigzag64,2,opt,name=stream_revision,json=streamRevision,proto3" json:"stream_revision,omitempty"`
	// The position of the last appended record in the global log.
	Position      *int64 `protobuf:"zigzag64,3,opt,name=position,proto3,oneof" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendResponse) Reset() {
	*x = AppendResponse{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResponse) ProtoMessage() {}

func (x *AppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResponse.ProtoReflect.Descriptor instead.
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{1}
}

func (x *AppendResponse) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendResponse) GetStreamRevision() int64 {
	if x != nil {
		return x.StreamRevision
	}
	return 0
}

func (x *AppendResponse) GetPosition() int64 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type AppendSessionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The results of each append request in the session.
	Output []*AppendResponse `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	// The global commit position of the last appended record in the session.
	Position      int64 `protobuf:"zigzag64,2,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendSessionResponse) Reset() {
	*x = AppendSessionResponse{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendSessionResponse) ProtoMessage() {}

func (x *AppendSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendSessionResponse.ProtoReflect.Descriptor instead.
func (*AppendSessionResponse) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{2}
}

func (x *AppendSessionResponse) GetOutput() []*AppendResponse {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *AppendSessionResponse) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Schema information for record validation and interpretation.
type SchemaInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The format of the data payload.
	// Determines how the bytes in AppendRecord.data should be interpreted.
	Format SchemaFormat `protobuf:"varint,1,opt,name=format,proto3,enum=kurrentdb.protocol.v2.streams.SchemaFormat" json:"format,omitempty"`
	// The schema name (replaces the legacy "event type" concept).
	// Identifies what kind of data this record contains.
	//
	// Common naming formats:
	//   - Kebab-case: "order-placed", "customer-registered"
	//   - URN format: "urn:kurrentdb:events:order-placed:v1"
	//   - Dotted namespace: "Teams.Player.V1", "Orders.OrderPlaced.V2"
	//   - Reverse domain: "com.acme.orders.placed"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The identifier of the specific version of the schema that the record payload
	// conforms to. This should match a registered schema version in the system.
	// Not necessary when not enforcing schema validation.
	Id            *string `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaInfo) Reset() {
	*x = SchemaInfo{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaInfo) ProtoMessage() {}

func (x *SchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaInfo.ProtoReflect.Descriptor instead.
func (*SchemaInfo) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaInfo) GetFormat() SchemaFormat {
	if x != nil {
		return x.Format
	}
	return SchemaFormat_SCHEMA_FORMAT_UNSPECIFIED
}

func (x *SchemaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Record to be appended to a stream.
type AppendRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this record (must be a valid UUID/GUID).
	// If not provided, the server will generate a new one.
	RecordId *string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// A collection of properties providing additional information about the
	// record. Can contain user-defined or system propreties.
	// System keys will be prefixed with "$" (e.g., "$timestamp").
	// User-defined keys MUST NOT start with "$".
	//
	// Common examples:
	//
	//	User metadata:
	//	  - "user-id": "12345"
	//	  - "tenant": "acme-corp"
	//	  - "source": "mobile-app"
	//
	//	System metadata (with $ prefix):
	//	  - "$trace-id": "4bf92f3577b34da6a3ce929d0e0e4736"  // OpenTelemetry trace ID
	//	  - "$span-id": "00f067aa0ba902b7"                   // OpenTelemetry span ID
	//	  - "$timestamp": "2025-01-15T10:30:00.000Z"         // ISO 8601 timestamp
	Properties map[string]*structpb.Value `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Schema information for this record.
	Schema *SchemaInfo `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// The record payload as raw bytes.
	// The format specified in SchemaInfo determines how to interpret these bytes.
	Data          []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendRecord) Reset() {
	*x = AppendRecord{}
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRecord) ProtoMessage() {}

func (x *AppendRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRecord.ProtoReflect.Descriptor instead.
func (*AppendRecord) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP(), []int{4}
}

func (x *AppendRecord) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *AppendRecord) GetProperties() map[string]*structpb.Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AppendRecord) GetSchema() *SchemaInfo {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *AppendRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_kurrentdb_protocols_v2_streams_streams_proto protoreflect.FileDescriptor

const file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc = "" +
	"\n" +
	",kurrentdb/protocols/v2/streams/streams.proto\x12\x1dkurrentdb.protocol.v2.streams\x1a\x1cgoogle/protobuf/struct.proto\"\xb6\x01\n" +
	"\rAppendRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12E\n" +
	"\arecords\x18\x02 \x03(\v2+.kurrentdb.protocol.v2.streams.AppendRecordR\arecords\x120\n" +
	"\x11expected_revision\x18\x03 \x01(\x12H\x00R\x10expectedRevision\x88\x01\x01B\x14\n" +
	"\x12_expected_revision\"\x7f\n" +
	"\x0eAppendResponse\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12'\n" +
	"\x0fstream_revision\x18\x02 \x01(\x12R\x0estreamRevision\x12\x1f\n" +
	"\bposition\x18\x03 \x01(\x12H\x00R\bposition\x88\x01\x01B\v\n" +
	"\t_position\"z\n" +
	"\x15AppendSessionResponse\x12E\n" +
	"\x06output\x18\x01 \x03(\v2-.kurrentdb.protocol.v2.streams.AppendResponseR\x06output\x12\x1a\n" +
	"\bposition\x18\x02 \x01(\x12R\bposition\"\x81\x01\n" +
	"\n" +
	"SchemaInfo\x12C\n" +
	"\x06format\x18\x01 \x01(\x0e2+.kurrentdb.protocol.v2.streams.SchemaFormatR\x06format\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x13\n" +
	"\x02id\x18\x03 \x01(\tH\x00R\x02id\x88\x01\x01B\x05\n" +
	"\x03_id\"\xc9\x02\n" +
	"\fAppendRecord\x12 \n" +
	"\trecord_id\x18\x01 \x01(\tH\x00R\brecordId\x88\x01\x01\x12[\n" +
	"\n" +
	"properties\x18\x02 \x03(\v2;.kurrentdb.protocol.v2.streams.AppendRecord.PropertiesEntryR\n" +
	"properties\x12A\n" +
	"\x06schema\x18\x03 \x01(\v2).kurrentdb.protocol.v2.streams.SchemaInfoR\x06schema\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x1aU\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_record_id*\x92\x01\n" +
	"\fSchemaFormat\x12\x1d\n" +
	"\x19SCHEMA_FORMAT_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SCHEMA_FORMAT_JSON\x10\x01\x12\x1a\n" +
	"\x16SCHEMA_FORMAT_PROTOBUF\x10\x02\x12\x16\n" +
	"\x12SCHEMA_FORMAT_AVRO\x10\x03\x12\x17\n" +
	"\x13SCHEMA_FORMAT_BYTES\x10\x04*\xdc\x01\n" +
	"\x19ExpectedRevisionConstants\x12,\n" +
	"(EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT\x10\x00\x122\n" +
	"%EXPECTED_REVISION_CONSTANTS_NO_STREAM\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12,\n" +
	"\x1fEXPECTED_REVISION_CONSTANTS_ANY\x10\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12/\n" +
	"\"EXPECTED_REVISION_CONSTANTS_EXISTS\x10\xfc\xff\xff\xff\xff\xff\xff\xff\xff\x012\x87\x01\n" +
	"\x0eStreamsService\x12u\n" +
	"\rAppendSession\x12,.kurrentdb.protocol.v2.streams.AppendRequest\x1a4.kurrentdb.protocol.v2.streams.AppendSessionResponse(\x01BQZOgithub.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/streamsb\x06proto3"

var (
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescOnce sync.Once
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData []byte
)

func file_kurrentdb_protocols_v2_streams_streams_proto_rawDescGZIP() []byte {
	file_kurrentdb_protocols_v2_streams_streams_proto_rawDescOnce.Do(func() {
		file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc)))
	})
	return file_kurrentdb_protocols_v2_streams_streams_proto_rawDescData
}

var file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kurrentdb_protocols_v2_streams_streams_proto_goTypes = []any{
	(SchemaFormat)(0),              // 0: kurrentdb.protocol.v2.streams.SchemaFormat
	(ExpectedRevisionConstants)(0), // 1: kurrentdb.protocol.v2.streams.ExpectedRevisionConstants
	(*AppendRequest)(nil),          // 2: kurrentdb.protocol.v2.streams.AppendRequest
	(*AppendResponse)(nil),         // 3: kurrentdb.protocol.v2.streams.AppendResponse
	(*AppendSessionResponse)(nil),  // 4: kurrentdb.protocol.v2.streams.AppendSessionResponse
	(*SchemaInfo)(nil),             // 5: kurrentdb.protocol.v2.streams.SchemaInfo
	(*AppendRecord)(nil),           // 6: kurrentdb.protocol.v2.streams.AppendRecord
	nil,                            // 7: kurrentdb.protocol.v2.streams.AppendRecord.PropertiesEntry
	(*structpb.Value)(nil),         // 8: google.protobuf.Value
}
var file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs = []int32{
	6, // 0: kurrentdb.protocol.v2.streams.AppendRequest.records:type_name -> kurrentdb.protocol.v2.streams.AppendRecord
	3, // 1: kurrentdb.protocol.v2.streams.AppendSessionResponse.output:type_name -> kurrentdb.protocol.v2.streams.AppendResponse
	0, // 2: kurrentdb.protocol.v2.streams.SchemaInfo.format:type_name -> kurrentdb.protocol.v2.streams.SchemaFormat
	7, // 3: kurrentdb.protocol.v2.streams.AppendRecord.properties:type_name -> kurrentdb.protocol.v2.streams.AppendRecord.PropertiesEntry
	5, // 4: kurrentdb.protocol.v2.streams.AppendRecord.schema:type_name -> kurrentdb.protocol.v2.streams.SchemaInfo
	8, // 5: kurrentdb.protocol.v2.streams.AppendRecord.PropertiesEntry.value:type_name -> google.protobuf.Value
	2, // 6: kurrentdb.protocol.v2.streams.StreamsService.AppendSession:input_type -> kurrentdb.protocol.v2.streams.AppendRequest
	4, // 7: kurrentdb.protocol.v2.streams.StreamsService.AppendSession:output_type -> kurrentdb.protocol.v2.streams.AppendSessionResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_kurrentdb_protocols_v2_streams_streams_proto_init() }
func file_kurrentdb_protocols_v2_streams_streams_proto_init() {
	if File_kurrentdb_protocols_v2_streams_streams_proto != nil {
		return
	}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[0].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[1].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[3].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc), len(file_kurrentdb_protocols_v2_streams_streams_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kurrentdb_protocols_v2_streams_streams_proto_goTypes,
		DependencyIndexes: file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs,
		EnumInfos:         file_kurrentdb_protocols_v2_streams_streams_proto_enumTypes,
		MessageInfos:      file_kurrentdb_protocols_v2_streams_streams_proto_msgTypes,
	}.Build()
	File_kurrentdb_protocols_v2_streams_streams_proto = out.File
	file_kurrentdb_protocols_v2_streams_streams_proto_goTypes = nil
	file_kurrentdb_protocols_v2_streams_streams_proto_depIdxs = nil
}
