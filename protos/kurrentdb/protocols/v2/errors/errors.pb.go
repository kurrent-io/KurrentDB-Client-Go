// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.26.0
// source: kurrentdb/protocols/v2/errors.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The canonical server error codes for the Kurrent Platform gRPC APIs.
// These errors represent common failure modes across all Kurrent services.
type ServerError int32

const (
	// Default value. This value is not used.
	// An error code MUST always be set to a non-zero value.
	// If an error code is not explicitly set, it MUST be treated as
	// an internal server error (INTERNAL).
	ServerError_UNSPECIFIED ServerError = 0
	// Authentication or authorization failure.
	// The client lacks valid credentials or sufficient permissions to perform the requested operation.
	//
	// Common causes:
	// - Missing or invalid authentication tokens
	// - Insufficient permissions for the operation
	// - Expired credentials
	//
	// Client action: Check credentials, verify permissions, and re-authenticate if necessary.
	// Not retriable without fixing the underlying authorization issue.
	ServerError_SERVER_ERROR_ACCESS_DENIED ServerError = 1
	// The request is malformed or contains invalid data.
	// The server cannot process the request due to client error.
	//
	// Common causes:
	// - Invalid field values (e.g., empty required fields, out-of-range numbers)
	// - Malformed data formats
	// - Validation failures
	//
	// Client action: Fix the request data and retry.
	// Not retriable without modifying the request.
	ServerError_SERVER_ERROR_BAD_REQUEST ServerError = 2
	// The server is not the cluster leader and cannot process write operations.
	// In a clustered deployment, only the leader node can accept write operations.
	//
	// Common causes:
	// - Client connected to a follower node
	// - Leader election in progress
	// - Network partition
	//
	// Client action: Redirect the request to the leader node indicated in the error details.
	// Retriable after redirecting to the correct leader node.
	ServerError_SERVER_ERROR_NOT_LEADER_NODE ServerError = 5
	// The operation did not complete within the configured timeout period.
	//
	// Common causes:
	// - Slow disk I/O during writes
	// - Cluster consensus delays
	// - Network latency
	// - Heavy server load
	//
	// Client action: Retry with exponential backoff. Consider increasing timeout values.
	// Retriable - the operation may succeed on retry.
	ServerError_SERVER_ERROR_OPERATION_TIMEOUT ServerError = 6
	// The server is starting up or shutting down and cannot process requests.
	//
	// Common causes:
	// - Server is initializing (loading indexes, recovering state)
	// - Server is performing graceful shutdown
	// - Server is performing maintenance operations
	//
	// Client action: Retry with exponential backoff. Wait for server to become ready.
	// Retriable - the server will become available after initialization completes.
	ServerError_SERVER_ERROR_SERVER_NOT_READY ServerError = 7
	// The server is temporarily overloaded and cannot accept more requests.
	// This is a backpressure mechanism to prevent server overload.
	//
	// Common causes:
	// - Too many concurrent requests
	// - Resource exhaustion (CPU, memory, disk I/O)
	// - Rate limiting triggered
	//
	// Client action: Retry with exponential backoff. Reduce request rate.
	// Retriable - the server may accept requests after load decreases.
	ServerError_SERVER_ERROR_SERVER_OVERLOADED ServerError = 8
	// An internal server error occurred.
	// This indicates a bug or unexpected condition in the server.
	//
	// Common causes:
	// - Unhandled exceptions
	// - Assertion failures
	// - Corrupted internal state
	// - Programming errors
	//
	// Client action: Report to server administrators with request details.
	// May be retriable, but likely indicates a server-side issue requiring investigation.
	ServerError_SERVER_ERROR_SERVER_MALFUNCTION ServerError = 9
)

// Enum value maps for ServerError.
var (
	ServerError_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SERVER_ERROR_ACCESS_DENIED",
		2: "SERVER_ERROR_BAD_REQUEST",
		5: "SERVER_ERROR_NOT_LEADER_NODE",
		6: "SERVER_ERROR_OPERATION_TIMEOUT",
		7: "SERVER_ERROR_SERVER_NOT_READY",
		8: "SERVER_ERROR_SERVER_OVERLOADED",
		9: "SERVER_ERROR_SERVER_MALFUNCTION",
	}
	ServerError_value = map[string]int32{
		"UNSPECIFIED":                     0,
		"SERVER_ERROR_ACCESS_DENIED":      1,
		"SERVER_ERROR_BAD_REQUEST":        2,
		"SERVER_ERROR_NOT_LEADER_NODE":    5,
		"SERVER_ERROR_OPERATION_TIMEOUT":  6,
		"SERVER_ERROR_SERVER_NOT_READY":   7,
		"SERVER_ERROR_SERVER_OVERLOADED":  8,
		"SERVER_ERROR_SERVER_MALFUNCTION": 9,
	}
)

func (x ServerError) Enum() *ServerError {
	p := new(ServerError)
	*p = x
	return p
}

func (x ServerError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerError) Descriptor() protoreflect.EnumDescriptor {
	return file_kurrentdb_protocols_v2_errors_proto_enumTypes[0].Descriptor()
}

func (ServerError) Type() protoreflect.EnumType {
	return &file_kurrentdb_protocols_v2_errors_proto_enumTypes[0]
}

func (x ServerError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerError.Descriptor instead.
func (ServerError) EnumDescriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_errors_proto_rawDescGZIP(), []int{0}
}

// Details for ACCESS_DENIED errors.
type AccessDeniedErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The friendly name of the operation that was denied.
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// The username of the user who was denied access.
	Username *string `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// The permission that was required for this operation.
	Permission    *string `protobuf:"bytes,3,opt,name=permission,proto3,oneof" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessDeniedErrorDetails) Reset() {
	*x = AccessDeniedErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessDeniedErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessDeniedErrorDetails) ProtoMessage() {}

func (x *AccessDeniedErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessDeniedErrorDetails.ProtoReflect.Descriptor instead.
func (*AccessDeniedErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_errors_proto_rawDescGZIP(), []int{0}
}

func (x *AccessDeniedErrorDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *AccessDeniedErrorDetails) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *AccessDeniedErrorDetails) GetPermission() string {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return ""
}

// Details for NOT_LEADER_NODE errors.
type NotLeaderNodeErrorDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about the current cluster leader node.
	CurrentLeader *NotLeaderNodeErrorDetails_NodeInfo `protobuf:"bytes,1,opt,name=current_leader,json=currentLeader,proto3" json:"current_leader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotLeaderNodeErrorDetails) Reset() {
	*x = NotLeaderNodeErrorDetails{}
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotLeaderNodeErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLeaderNodeErrorDetails) ProtoMessage() {}

func (x *NotLeaderNodeErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLeaderNodeErrorDetails.ProtoReflect.Descriptor instead.
func (*NotLeaderNodeErrorDetails) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_errors_proto_rawDescGZIP(), []int{1}
}

func (x *NotLeaderNodeErrorDetails) GetCurrentLeader() *NotLeaderNodeErrorDetails_NodeInfo {
	if x != nil {
		return x.CurrentLeader
	}
	return nil
}

// Information about a cluster node.
type NotLeaderNodeErrorDetails_NodeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hostname or IP address of the node.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The gRPC port of the node.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The unique instance ID of the node.
	NodeId        *string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotLeaderNodeErrorDetails_NodeInfo) Reset() {
	*x = NotLeaderNodeErrorDetails_NodeInfo{}
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotLeaderNodeErrorDetails_NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotLeaderNodeErrorDetails_NodeInfo) ProtoMessage() {}

func (x *NotLeaderNodeErrorDetails_NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kurrentdb_protocols_v2_errors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotLeaderNodeErrorDetails_NodeInfo.ProtoReflect.Descriptor instead.
func (*NotLeaderNodeErrorDetails_NodeInfo) Descriptor() ([]byte, []int) {
	return file_kurrentdb_protocols_v2_errors_proto_rawDescGZIP(), []int{1, 0}
}

func (x *NotLeaderNodeErrorDetails_NodeInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NotLeaderNodeErrorDetails_NodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NotLeaderNodeErrorDetails_NodeInfo) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

var File_kurrentdb_protocols_v2_errors_proto protoreflect.FileDescriptor

const file_kurrentdb_protocols_v2_errors_proto_rawDesc = "" +
	"\n" +
	"#kurrentdb/protocols/v2/errors.proto\x12\vkurrent.rpc\x1a kurrentdb/protocols/v2/rpc.proto\"\x9a\x01\n" +
	"\x18AccessDeniedErrorDetails\x12\x1c\n" +
	"\toperation\x18\x01 \x01(\tR\toperation\x12\x1f\n" +
	"\busername\x18\x02 \x01(\tH\x00R\busername\x88\x01\x01\x12#\n" +
	"\n" +
	"permission\x18\x03 \x01(\tH\x01R\n" +
	"permission\x88\x01\x01B\v\n" +
	"\t_usernameB\r\n" +
	"\v_permission\"\xd1\x01\n" +
	"\x19NotLeaderNodeErrorDetails\x12V\n" +
	"\x0ecurrent_leader\x18\x01 \x01(\v2/.kurrent.rpc.NotLeaderNodeErrorDetails.NodeInfoR\rcurrentLeader\x1a\\\n" +
	"\bNodeInfo\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1c\n" +
	"\anode_id\x18\x03 \x01(\tH\x00R\x06nodeId\x88\x01\x01B\n" +
	"\n" +
	"\b_node_id*\xcc\x02\n" +
	"\vServerError\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12(\n" +
	"\x1aSERVER_ERROR_ACCESS_DENIED\x10\x01\x1a\b\x82\xb5\x18\x04\b\a\x10\x01\x12&\n" +
	"\x18SERVER_ERROR_BAD_REQUEST\x10\x02\x1a\b\x82\xb5\x18\x04\b\x03\x10\x01\x12*\n" +
	"\x1cSERVER_ERROR_NOT_LEADER_NODE\x10\x05\x1a\b\x82\xb5\x18\x04\b\t\x10\x01\x12*\n" +
	"\x1eSERVER_ERROR_OPERATION_TIMEOUT\x10\x06\x1a\x06\x82\xb5\x18\x02\b\x04\x12)\n" +
	"\x1dSERVER_ERROR_SERVER_NOT_READY\x10\a\x1a\x06\x82\xb5\x18\x02\b\x0e\x12*\n" +
	"\x1eSERVER_ERROR_SERVER_OVERLOADED\x10\b\x1a\x06\x82\xb5\x18\x02\b\x0e\x12+\n" +
	"\x1fSERVER_ERROR_SERVER_MALFUNCTION\x10\t\x1a\x06\x82\xb5\x18\x02\b\rBMZKgithub.com/kurrent-io/KurrentDB-Client-Go/protos/kurrentdb/protocols/v2/rpcb\x06proto3"

var (
	file_kurrentdb_protocols_v2_errors_proto_rawDescOnce sync.Once
	file_kurrentdb_protocols_v2_errors_proto_rawDescData []byte
)

func file_kurrentdb_protocols_v2_errors_proto_rawDescGZIP() []byte {
	file_kurrentdb_protocols_v2_errors_proto_rawDescOnce.Do(func() {
		file_kurrentdb_protocols_v2_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_errors_proto_rawDesc), len(file_kurrentdb_protocols_v2_errors_proto_rawDesc)))
	})
	return file_kurrentdb_protocols_v2_errors_proto_rawDescData
}

var file_kurrentdb_protocols_v2_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kurrentdb_protocols_v2_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kurrentdb_protocols_v2_errors_proto_goTypes = []any{
	(ServerError)(0),                           // 0: kurrent.rpc.ServerError
	(*AccessDeniedErrorDetails)(nil),           // 1: kurrent.rpc.AccessDeniedErrorDetails
	(*NotLeaderNodeErrorDetails)(nil),          // 2: kurrent.rpc.NotLeaderNodeErrorDetails
	(*NotLeaderNodeErrorDetails_NodeInfo)(nil), // 3: kurrent.rpc.NotLeaderNodeErrorDetails.NodeInfo
}
var file_kurrentdb_protocols_v2_errors_proto_depIdxs = []int32{
	3, // 0: kurrent.rpc.NotLeaderNodeErrorDetails.current_leader:type_name -> kurrent.rpc.NotLeaderNodeErrorDetails.NodeInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kurrentdb_protocols_v2_errors_proto_init() }
func file_kurrentdb_protocols_v2_errors_proto_init() {
	if File_kurrentdb_protocols_v2_errors_proto != nil {
		return
	}
	file_kurrentdb_protocols_v2_rpc_proto_init()
	file_kurrentdb_protocols_v2_errors_proto_msgTypes[0].OneofWrappers = []any{}
	file_kurrentdb_protocols_v2_errors_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kurrentdb_protocols_v2_errors_proto_rawDesc), len(file_kurrentdb_protocols_v2_errors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kurrentdb_protocols_v2_errors_proto_goTypes,
		DependencyIndexes: file_kurrentdb_protocols_v2_errors_proto_depIdxs,
		EnumInfos:         file_kurrentdb_protocols_v2_errors_proto_enumTypes,
		MessageInfos:      file_kurrentdb_protocols_v2_errors_proto_msgTypes,
	}.Build()
	File_kurrentdb_protocols_v2_errors_proto = out.File
	file_kurrentdb_protocols_v2_errors_proto_goTypes = nil
	file_kurrentdb_protocols_v2_errors_proto_depIdxs = nil
}
