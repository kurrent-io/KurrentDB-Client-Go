// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: kurrentdb/protocols/v2/features/service.proto

//*
// KurrentDB Server Features Protocol
//
// This protocol defines services and messages for discovering server features
// in a KurrentDB environment. It enables clients to adapt their behavior based
// on server features, their enablement status, and requirements.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerInfoService_GetServerInfo_FullMethodName = "/kurrentdb.protocol.v2.ServerInfoService/GetServerInfo"
)

// ServerInfoServiceClient is the client API for ServerInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service for retrieving information about the server, including features
// and metadata.
type ServerInfoServiceClient interface {
	// Retrieves server information and available features
	GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
}

type serverInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerInfoServiceClient(cc grpc.ClientConnInterface) ServerInfoServiceClient {
	return &serverInfoServiceClient{cc}
}

func (c *serverInfoServiceClient) GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, ServerInfoService_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerInfoServiceServer is the server API for ServerInfoService service.
// All implementations must embed UnimplementedServerInfoServiceServer
// for forward compatibility.
//
// *
// Service for retrieving information about the server, including features
// and metadata.
type ServerInfoServiceServer interface {
	// Retrieves server information and available features
	GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	mustEmbedUnimplementedServerInfoServiceServer()
}

// UnimplementedServerInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerInfoServiceServer struct{}

func (UnimplementedServerInfoServiceServer) GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedServerInfoServiceServer) mustEmbedUnimplementedServerInfoServiceServer() {}
func (UnimplementedServerInfoServiceServer) testEmbeddedByValue()                           {}

// UnsafeServerInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerInfoServiceServer will
// result in compilation errors.
type UnsafeServerInfoServiceServer interface {
	mustEmbedUnimplementedServerInfoServiceServer()
}

func RegisterServerInfoServiceServer(s grpc.ServiceRegistrar, srv ServerInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerInfoService_ServiceDesc, srv)
}

func _ServerInfoService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerInfoService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServiceServer).GetServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerInfoService_ServiceDesc is the grpc.ServiceDesc for ServerInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kurrentdb.protocol.v2.ServerInfoService",
	HandlerType: (*ServerInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _ServerInfoService_GetServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kurrentdb/protocols/v2/features/service.proto",
}
