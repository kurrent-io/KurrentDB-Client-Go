// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.0
// source: streams.v2.proto

//
// This protocol is UNSTABLE in the sense of being subject to change.
//

package streams_v2

import (
	dynamic_value "github.com/kurrent-io/KurrentDB-Client-Go/protos/dynamic_value"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Constants that match the expected state of a stream during an
// append operation. It can be used to specify whether the stream should exist,
// not exist, or can be in any state.
type ExpectedRevisionConstants int32

const (
	// The stream should exist and have a single event.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT ExpectedRevisionConstants = 0
	// It is not important whether the stream exists or not.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_ANY ExpectedRevisionConstants = -2
	// The stream should not exist. If it does, the append will fail.
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_NO_STREAM ExpectedRevisionConstants = -1
	// The stream should exist
	ExpectedRevisionConstants_EXPECTED_REVISION_CONSTANTS_EXISTS ExpectedRevisionConstants = -4
)

// Enum value maps for ExpectedRevisionConstants.
var (
	ExpectedRevisionConstants_name = map[int32]string{
		0:  "EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT",
		-2: "EXPECTED_REVISION_CONSTANTS_ANY",
		-1: "EXPECTED_REVISION_CONSTANTS_NO_STREAM",
		-4: "EXPECTED_REVISION_CONSTANTS_EXISTS",
	}
	ExpectedRevisionConstants_value = map[string]int32{
		"EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT": 0,
		"EXPECTED_REVISION_CONSTANTS_ANY":          -2,
		"EXPECTED_REVISION_CONSTANTS_NO_STREAM":    -1,
		"EXPECTED_REVISION_CONSTANTS_EXISTS":       -4,
	}
)

func (x ExpectedRevisionConstants) Enum() *ExpectedRevisionConstants {
	p := new(ExpectedRevisionConstants)
	*p = x
	return p
}

func (x ExpectedRevisionConstants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpectedRevisionConstants) Descriptor() protoreflect.EnumDescriptor {
	return file_streams_v2_proto_enumTypes[0].Descriptor()
}

func (ExpectedRevisionConstants) Type() protoreflect.EnumType {
	return &file_streams_v2_proto_enumTypes[0]
}

func (x ExpectedRevisionConstants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpectedRevisionConstants.Descriptor instead.
func (ExpectedRevisionConstants) EnumDescriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{0}
}

// Record to be appended to a stream.
type AppendRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Universally Unique identifier for the record. Must be a guid.
	// If not provided, the server will generate a new one.
	RecordId *string `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3,oneof" json:"record_id,omitempty"`
	// A collection of properties providing additional system information about the
	// record.
	Properties map[string]*dynamic_value.DynamicValue `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The actual data payload of the record, stored as bytes.
	Data          []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendRecord) Reset() {
	*x = AppendRecord{}
	mi := &file_streams_v2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRecord) ProtoMessage() {}

func (x *AppendRecord) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRecord.ProtoReflect.Descriptor instead.
func (*AppendRecord) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{0}
}

func (x *AppendRecord) GetRecordId() string {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return ""
}

func (x *AppendRecord) GetProperties() map[string]*dynamic_value.DynamicValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AppendRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents the input for appending records to a specific stream.
type AppendStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to append records to.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The records to append to the stream.
	Records []*AppendRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	// The expected revision of the stream. If the stream's current revision does
	// not match, the append will fail.
	// The expected revision can also be one of the special values
	// from ExpectedRevisionConstants.
	// missing value means no expectation: same as EXPECTED_REVISION_CONSTANTS_ANY
	ExpectedRevision *int64 `protobuf:"zigzag64,3,opt,name=expected_revision,json=expectedRevision,proto3,oneof" json:"expected_revision,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AppendStreamRequest) Reset() {
	*x = AppendStreamRequest{}
	mi := &file_streams_v2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamRequest) ProtoMessage() {}

func (x *AppendStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamRequest.ProtoReflect.Descriptor instead.
func (*AppendStreamRequest) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{1}
}

func (x *AppendStreamRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamRequest) GetRecords() []*AppendRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *AppendStreamRequest) GetExpectedRevision() int64 {
	if x != nil && x.ExpectedRevision != nil {
		return *x.ExpectedRevision
	}
	return 0
}

// Success represents the successful outcome of an append operation.
type AppendStreamSuccess struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to which records were appended.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The position of the last appended record in the transaction.
	Position int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The revision of the stream after the append operation.
	StreamRevision int64 `protobuf:"varint,3,opt,name=stream_revision,json=streamRevision,proto3" json:"stream_revision,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppendStreamSuccess) Reset() {
	*x = AppendStreamSuccess{}
	mi := &file_streams_v2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamSuccess) ProtoMessage() {}

func (x *AppendStreamSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamSuccess.ProtoReflect.Descriptor instead.
func (*AppendStreamSuccess) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{2}
}

func (x *AppendStreamSuccess) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamSuccess) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AppendStreamSuccess) GetStreamRevision() int64 {
	if x != nil {
		return x.StreamRevision
	}
	return 0
}

// Failure represents the detailed error information when an append operation fails.
type AppendStreamFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream to which records failed to append.
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The error details
	//
	// Types that are valid to be assigned to Error:
	//
	//	*AppendStreamFailure_WrongExpectedRevision
	//	*AppendStreamFailure_AccessDenied
	//	*AppendStreamFailure_StreamDeleted
	//	*AppendStreamFailure_TransactionMaxSizeExceeded
	Error         isAppendStreamFailure_Error `protobuf_oneof:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendStreamFailure) Reset() {
	*x = AppendStreamFailure{}
	mi := &file_streams_v2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamFailure) ProtoMessage() {}

func (x *AppendStreamFailure) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamFailure.ProtoReflect.Descriptor instead.
func (*AppendStreamFailure) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{3}
}

func (x *AppendStreamFailure) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AppendStreamFailure) GetError() isAppendStreamFailure_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AppendStreamFailure) GetWrongExpectedRevision() *ErrorDetails_WrongExpectedRevision {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_WrongExpectedRevision); ok {
			return x.WrongExpectedRevision
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetAccessDenied() *ErrorDetails_AccessDenied {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_AccessDenied); ok {
			return x.AccessDenied
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetStreamDeleted() *ErrorDetails_StreamDeleted {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_StreamDeleted); ok {
			return x.StreamDeleted
		}
	}
	return nil
}

func (x *AppendStreamFailure) GetTransactionMaxSizeExceeded() *ErrorDetails_TransactionMaxSizeExceeded {
	if x != nil {
		if x, ok := x.Error.(*AppendStreamFailure_TransactionMaxSizeExceeded); ok {
			return x.TransactionMaxSizeExceeded
		}
	}
	return nil
}

type isAppendStreamFailure_Error interface {
	isAppendStreamFailure_Error()
}

type AppendStreamFailure_WrongExpectedRevision struct {
	// Failed because the actual stream revision didn't match the expected revision.
	WrongExpectedRevision *ErrorDetails_WrongExpectedRevision `protobuf:"bytes,2,opt,name=wrong_expected_revision,json=wrongExpectedRevision,proto3,oneof"`
}

type AppendStreamFailure_AccessDenied struct {
	// Failed because the client lacks sufficient permissions.
	AccessDenied *ErrorDetails_AccessDenied `protobuf:"bytes,3,opt,name=access_denied,json=accessDenied,proto3,oneof"`
}

type AppendStreamFailure_StreamDeleted struct {
	// Failed because the target stream has been deleted.
	StreamDeleted *ErrorDetails_StreamDeleted `protobuf:"bytes,4,opt,name=stream_deleted,json=streamDeleted,proto3,oneof"`
}

type AppendStreamFailure_TransactionMaxSizeExceeded struct {
	TransactionMaxSizeExceeded *ErrorDetails_TransactionMaxSizeExceeded `protobuf:"bytes,5,opt,name=transaction_max_size_exceeded,json=transactionMaxSizeExceeded,proto3,oneof"`
}

func (*AppendStreamFailure_WrongExpectedRevision) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_AccessDenied) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_StreamDeleted) isAppendStreamFailure_Error() {}

func (*AppendStreamFailure_TransactionMaxSizeExceeded) isAppendStreamFailure_Error() {}

// Represents the output of appending records to a specific stream.
type AppendStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The result of the append operation.
	//
	// Types that are valid to be assigned to Result:
	//
	//	*AppendStreamResponse_Success
	//	*AppendStreamResponse_Failure
	Result        isAppendStreamResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendStreamResponse) Reset() {
	*x = AppendStreamResponse{}
	mi := &file_streams_v2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendStreamResponse) ProtoMessage() {}

func (x *AppendStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendStreamResponse.ProtoReflect.Descriptor instead.
func (*AppendStreamResponse) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{4}
}

func (x *AppendStreamResponse) GetResult() isAppendStreamResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AppendStreamResponse) GetSuccess() *AppendStreamSuccess {
	if x != nil {
		if x, ok := x.Result.(*AppendStreamResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *AppendStreamResponse) GetFailure() *AppendStreamFailure {
	if x != nil {
		if x, ok := x.Result.(*AppendStreamResponse_Failure); ok {
			return x.Failure
		}
	}
	return nil
}

type isAppendStreamResponse_Result interface {
	isAppendStreamResponse_Result()
}

type AppendStreamResponse_Success struct {
	// Success represents the successful outcome of an append operation.
	Success *AppendStreamSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type AppendStreamResponse_Failure struct {
	// Failure represents the details of a failed append operation.
	Failure *AppendStreamFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*AppendStreamResponse_Success) isAppendStreamResponse_Result() {}

func (*AppendStreamResponse_Failure) isAppendStreamResponse_Result() {}

// MultiStreamAppendRequest represents a request to append records to multiple streams.
type MultiStreamAppendRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of AppendStreamInput messages, each representing a stream to which records should be appended.
	Input         []*AppendStreamRequest `protobuf:"bytes,1,rep,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendRequest) Reset() {
	*x = MultiStreamAppendRequest{}
	mi := &file_streams_v2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendRequest) ProtoMessage() {}

func (x *MultiStreamAppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendRequest.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendRequest) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{5}
}

func (x *MultiStreamAppendRequest) GetInput() []*AppendStreamRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

// Response from the MultiStreamAppend operation.
type MultiStreamAppendResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*MultiStreamAppendResponse_Success_
	//	*MultiStreamAppendResponse_Failure_
	Result        isMultiStreamAppendResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse) Reset() {
	*x = MultiStreamAppendResponse{}
	mi := &file_streams_v2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse) ProtoMessage() {}

func (x *MultiStreamAppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{6}
}

func (x *MultiStreamAppendResponse) GetResult() isMultiStreamAppendResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MultiStreamAppendResponse) GetSuccess() *MultiStreamAppendResponse_Success {
	if x != nil {
		if x, ok := x.Result.(*MultiStreamAppendResponse_Success_); ok {
			return x.Success
		}
	}
	return nil
}

func (x *MultiStreamAppendResponse) GetFailure() *MultiStreamAppendResponse_Failure {
	if x != nil {
		if x, ok := x.Result.(*MultiStreamAppendResponse_Failure_); ok {
			return x.Failure
		}
	}
	return nil
}

type isMultiStreamAppendResponse_Result interface {
	isMultiStreamAppendResponse_Result()
}

type MultiStreamAppendResponse_Success_ struct {
	// Success represents the successful outcome of a multi-stream append operation.
	Success *MultiStreamAppendResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type MultiStreamAppendResponse_Failure_ struct {
	// Failure represents the details of a failed multi-stream append operation.
	Failure *MultiStreamAppendResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*MultiStreamAppendResponse_Success_) isMultiStreamAppendResponse_Result() {}

func (*MultiStreamAppendResponse_Failure_) isMultiStreamAppendResponse_Result() {}

// ErrorDetails provides detailed information about specific error conditions.
type ErrorDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	mi := &file_streams_v2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{7}
}

type MultiStreamAppendResponse_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []*AppendStreamSuccess `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse_Success) Reset() {
	*x = MultiStreamAppendResponse_Success{}
	mi := &file_streams_v2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse_Success) ProtoMessage() {}

func (x *MultiStreamAppendResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse_Success.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse_Success) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MultiStreamAppendResponse_Success) GetOutput() []*AppendStreamSuccess {
	if x != nil {
		return x.Output
	}
	return nil
}

type MultiStreamAppendResponse_Failure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []*AppendStreamFailure `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiStreamAppendResponse_Failure) Reset() {
	*x = MultiStreamAppendResponse_Failure{}
	mi := &file_streams_v2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiStreamAppendResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiStreamAppendResponse_Failure) ProtoMessage() {}

func (x *MultiStreamAppendResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiStreamAppendResponse_Failure.ProtoReflect.Descriptor instead.
func (*MultiStreamAppendResponse_Failure) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{6, 1}
}

func (x *MultiStreamAppendResponse_Failure) GetOutput() []*AppendStreamFailure {
	if x != nil {
		return x.Output
	}
	return nil
}

// When the user does not have sufficient permissions to perform the operation.
type ErrorDetails_AccessDenied struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reason for access denial.
	Reason        string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails_AccessDenied) Reset() {
	*x = ErrorDetails_AccessDenied{}
	mi := &file_streams_v2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails_AccessDenied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails_AccessDenied) ProtoMessage() {}

func (x *ErrorDetails_AccessDenied) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails_AccessDenied.ProtoReflect.Descriptor instead.
func (*ErrorDetails_AccessDenied) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ErrorDetails_AccessDenied) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// When the stream has been deleted.
type ErrorDetails_StreamDeleted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails_StreamDeleted) Reset() {
	*x = ErrorDetails_StreamDeleted{}
	mi := &file_streams_v2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails_StreamDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails_StreamDeleted) ProtoMessage() {}

func (x *ErrorDetails_StreamDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails_StreamDeleted.ProtoReflect.Descriptor instead.
func (*ErrorDetails_StreamDeleted) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{7, 1}
}

// When the expected revision of the stream does not match the actual revision.
type ErrorDetails_WrongExpectedRevision struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The actual revision of the stream.
	StreamRevision int64 `protobuf:"varint,1,opt,name=stream_revision,json=streamRevision,proto3" json:"stream_revision,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ErrorDetails_WrongExpectedRevision) Reset() {
	*x = ErrorDetails_WrongExpectedRevision{}
	mi := &file_streams_v2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails_WrongExpectedRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails_WrongExpectedRevision) ProtoMessage() {}

func (x *ErrorDetails_WrongExpectedRevision) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails_WrongExpectedRevision.ProtoReflect.Descriptor instead.
func (*ErrorDetails_WrongExpectedRevision) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{7, 2}
}

func (x *ErrorDetails_WrongExpectedRevision) GetStreamRevision() int64 {
	if x != nil {
		return x.StreamRevision
	}
	return 0
}

// When the transaction exceeds the maximum size allowed
// (it's bigger than the configured chunk size).
type ErrorDetails_TransactionMaxSizeExceeded struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum allowed size of the transaction.
	MaxSize       int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetails_TransactionMaxSizeExceeded) Reset() {
	*x = ErrorDetails_TransactionMaxSizeExceeded{}
	mi := &file_streams_v2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetails_TransactionMaxSizeExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails_TransactionMaxSizeExceeded) ProtoMessage() {}

func (x *ErrorDetails_TransactionMaxSizeExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_streams_v2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails_TransactionMaxSizeExceeded.ProtoReflect.Descriptor instead.
func (*ErrorDetails_TransactionMaxSizeExceeded) Descriptor() ([]byte, []int) {
	return file_streams_v2_proto_rawDescGZIP(), []int{7, 3}
}

func (x *ErrorDetails_TransactionMaxSizeExceeded) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

var File_streams_v2_proto protoreflect.FileDescriptor

const file_streams_v2_proto_rawDesc = "" +
	"\n" +
	"\x10streams.v2.proto\x12\x15kurrentdb.protocol.v2\x1a\x13dynamic-value.proto\"\x88\x02\n" +
	"\fAppendRecord\x12 \n" +
	"\trecord_id\x18\x01 \x01(\tH\x00R\brecordId\x88\x01\x01\x12S\n" +
	"\n" +
	"properties\x18\x02 \x03(\v23.kurrentdb.protocol.v2.AppendRecord.PropertiesEntryR\n" +
	"properties\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x1a_\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .kurrentdb.protobuf.DynamicValueR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_record_id\"\xb4\x01\n" +
	"\x13AppendStreamRequest\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12=\n" +
	"\arecords\x18\x02 \x03(\v2#.kurrentdb.protocol.v2.AppendRecordR\arecords\x120\n" +
	"\x11expected_revision\x18\x03 \x01(\x12H\x00R\x10expectedRevision\x88\x01\x01B\x14\n" +
	"\x12_expected_revision\"r\n" +
	"\x13AppendStreamSuccess\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12\x1a\n" +
	"\bposition\x18\x02 \x01(\x03R\bposition\x12'\n" +
	"\x0fstream_revision\x18\x03 \x01(\x03R\x0estreamRevision\"\xe6\x03\n" +
	"\x13AppendStreamFailure\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12s\n" +
	"\x17wrong_expected_revision\x18\x02 \x01(\v29.kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevisionH\x00R\x15wrongExpectedRevision\x12W\n" +
	"\raccess_denied\x18\x03 \x01(\v20.kurrentdb.protocol.v2.ErrorDetails.AccessDeniedH\x00R\faccessDenied\x12Z\n" +
	"\x0estream_deleted\x18\x04 \x01(\v21.kurrentdb.protocol.v2.ErrorDetails.StreamDeletedH\x00R\rstreamDeleted\x12\x83\x01\n" +
	"\x1dtransaction_max_size_exceeded\x18\x05 \x01(\v2>.kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceededH\x00R\x1atransactionMaxSizeExceededB\a\n" +
	"\x05error\"\xb0\x01\n" +
	"\x14AppendStreamResponse\x12F\n" +
	"\asuccess\x18\x01 \x01(\v2*.kurrentdb.protocol.v2.AppendStreamSuccessH\x00R\asuccess\x12F\n" +
	"\afailure\x18\x02 \x01(\v2*.kurrentdb.protocol.v2.AppendStreamFailureH\x00R\afailureB\b\n" +
	"\x06result\"\\\n" +
	"\x18MultiStreamAppendRequest\x12@\n" +
	"\x05input\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamRequestR\x05input\"\xef\x02\n" +
	"\x19MultiStreamAppendResponse\x12T\n" +
	"\asuccess\x18\x01 \x01(\v28.kurrentdb.protocol.v2.MultiStreamAppendResponse.SuccessH\x00R\asuccess\x12T\n" +
	"\afailure\x18\x02 \x01(\v28.kurrentdb.protocol.v2.MultiStreamAppendResponse.FailureH\x00R\afailure\x1aM\n" +
	"\aSuccess\x12B\n" +
	"\x06output\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamSuccessR\x06output\x1aM\n" +
	"\aFailure\x12B\n" +
	"\x06output\x18\x01 \x03(\v2*.kurrentdb.protocol.v2.AppendStreamFailureR\x06outputB\b\n" +
	"\x06result\"\xc2\x01\n" +
	"\fErrorDetails\x1a&\n" +
	"\fAccessDenied\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\x1a\x0f\n" +
	"\rStreamDeleted\x1a@\n" +
	"\x15WrongExpectedRevision\x12'\n" +
	"\x0fstream_revision\x18\x01 \x01(\x03R\x0estreamRevision\x1a7\n" +
	"\x1aTransactionMaxSizeExceeded\x12\x19\n" +
	"\bmax_size\x18\x01 \x01(\x05R\amaxSize*\xdc\x01\n" +
	"\x19ExpectedRevisionConstants\x12,\n" +
	"(EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT\x10\x00\x12,\n" +
	"\x1fEXPECTED_REVISION_CONSTANTS_ANY\x10\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x01\x122\n" +
	"%EXPECTED_REVISION_CONSTANTS_NO_STREAM\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12/\n" +
	"\"EXPECTED_REVISION_CONSTANTS_EXISTS\x10\xfc\xff\xff\xff\xff\xff\xff\xff\xff\x012\x84\x02\n" +
	"\x0eStreamsService\x12v\n" +
	"\x11MultiStreamAppend\x12/.kurrentdb.protocol.v2.MultiStreamAppendRequest\x1a0.kurrentdb.protocol.v2.MultiStreamAppendResponse\x12z\n" +
	"\x18MultiStreamAppendSession\x12*.kurrentdb.protocol.v2.AppendStreamRequest\x1a0.kurrentdb.protocol.v2.MultiStreamAppendResponse(\x01Bh\n" +
	"\x0fio.kurrentdb.v2P\x01Z;github.com/kurrent-io/KurrentDB-Client-Go/protos/streams_v2\xaa\x02\x15KurrentDB.Protocol.V2b\x06proto3"

var (
	file_streams_v2_proto_rawDescOnce sync.Once
	file_streams_v2_proto_rawDescData []byte
)

func file_streams_v2_proto_rawDescGZIP() []byte {
	file_streams_v2_proto_rawDescOnce.Do(func() {
		file_streams_v2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_streams_v2_proto_rawDesc), len(file_streams_v2_proto_rawDesc)))
	})
	return file_streams_v2_proto_rawDescData
}

var file_streams_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_streams_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_streams_v2_proto_goTypes = []any{
	(ExpectedRevisionConstants)(0),                  // 0: kurrentdb.protocol.v2.ExpectedRevisionConstants
	(*AppendRecord)(nil),                            // 1: kurrentdb.protocol.v2.AppendRecord
	(*AppendStreamRequest)(nil),                     // 2: kurrentdb.protocol.v2.AppendStreamRequest
	(*AppendStreamSuccess)(nil),                     // 3: kurrentdb.protocol.v2.AppendStreamSuccess
	(*AppendStreamFailure)(nil),                     // 4: kurrentdb.protocol.v2.AppendStreamFailure
	(*AppendStreamResponse)(nil),                    // 5: kurrentdb.protocol.v2.AppendStreamResponse
	(*MultiStreamAppendRequest)(nil),                // 6: kurrentdb.protocol.v2.MultiStreamAppendRequest
	(*MultiStreamAppendResponse)(nil),               // 7: kurrentdb.protocol.v2.MultiStreamAppendResponse
	(*ErrorDetails)(nil),                            // 8: kurrentdb.protocol.v2.ErrorDetails
	nil,                                             // 9: kurrentdb.protocol.v2.AppendRecord.PropertiesEntry
	(*MultiStreamAppendResponse_Success)(nil),       // 10: kurrentdb.protocol.v2.MultiStreamAppendResponse.Success
	(*MultiStreamAppendResponse_Failure)(nil),       // 11: kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure
	(*ErrorDetails_AccessDenied)(nil),               // 12: kurrentdb.protocol.v2.ErrorDetails.AccessDenied
	(*ErrorDetails_StreamDeleted)(nil),              // 13: kurrentdb.protocol.v2.ErrorDetails.StreamDeleted
	(*ErrorDetails_WrongExpectedRevision)(nil),      // 14: kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision
	(*ErrorDetails_TransactionMaxSizeExceeded)(nil), // 15: kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded
	(*dynamic_value.DynamicValue)(nil),              // 16: kurrentdb.protobuf.DynamicValue
}
var file_streams_v2_proto_depIdxs = []int32{
	9,  // 0: kurrentdb.protocol.v2.AppendRecord.properties:type_name -> kurrentdb.protocol.v2.AppendRecord.PropertiesEntry
	1,  // 1: kurrentdb.protocol.v2.AppendStreamRequest.records:type_name -> kurrentdb.protocol.v2.AppendRecord
	14, // 2: kurrentdb.protocol.v2.AppendStreamFailure.wrong_expected_revision:type_name -> kurrentdb.protocol.v2.ErrorDetails.WrongExpectedRevision
	12, // 3: kurrentdb.protocol.v2.AppendStreamFailure.access_denied:type_name -> kurrentdb.protocol.v2.ErrorDetails.AccessDenied
	13, // 4: kurrentdb.protocol.v2.AppendStreamFailure.stream_deleted:type_name -> kurrentdb.protocol.v2.ErrorDetails.StreamDeleted
	15, // 5: kurrentdb.protocol.v2.AppendStreamFailure.transaction_max_size_exceeded:type_name -> kurrentdb.protocol.v2.ErrorDetails.TransactionMaxSizeExceeded
	3,  // 6: kurrentdb.protocol.v2.AppendStreamResponse.success:type_name -> kurrentdb.protocol.v2.AppendStreamSuccess
	4,  // 7: kurrentdb.protocol.v2.AppendStreamResponse.failure:type_name -> kurrentdb.protocol.v2.AppendStreamFailure
	2,  // 8: kurrentdb.protocol.v2.MultiStreamAppendRequest.input:type_name -> kurrentdb.protocol.v2.AppendStreamRequest
	10, // 9: kurrentdb.protocol.v2.MultiStreamAppendResponse.success:type_name -> kurrentdb.protocol.v2.MultiStreamAppendResponse.Success
	11, // 10: kurrentdb.protocol.v2.MultiStreamAppendResponse.failure:type_name -> kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure
	16, // 11: kurrentdb.protocol.v2.AppendRecord.PropertiesEntry.value:type_name -> kurrentdb.protobuf.DynamicValue
	3,  // 12: kurrentdb.protocol.v2.MultiStreamAppendResponse.Success.output:type_name -> kurrentdb.protocol.v2.AppendStreamSuccess
	4,  // 13: kurrentdb.protocol.v2.MultiStreamAppendResponse.Failure.output:type_name -> kurrentdb.protocol.v2.AppendStreamFailure
	6,  // 14: kurrentdb.protocol.v2.StreamsService.MultiStreamAppend:input_type -> kurrentdb.protocol.v2.MultiStreamAppendRequest
	2,  // 15: kurrentdb.protocol.v2.StreamsService.MultiStreamAppendSession:input_type -> kurrentdb.protocol.v2.AppendStreamRequest
	7,  // 16: kurrentdb.protocol.v2.StreamsService.MultiStreamAppend:output_type -> kurrentdb.protocol.v2.MultiStreamAppendResponse
	7,  // 17: kurrentdb.protocol.v2.StreamsService.MultiStreamAppendSession:output_type -> kurrentdb.protocol.v2.MultiStreamAppendResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_streams_v2_proto_init() }
func file_streams_v2_proto_init() {
	if File_streams_v2_proto != nil {
		return
	}
	file_streams_v2_proto_msgTypes[0].OneofWrappers = []any{}
	file_streams_v2_proto_msgTypes[1].OneofWrappers = []any{}
	file_streams_v2_proto_msgTypes[3].OneofWrappers = []any{
		(*AppendStreamFailure_WrongExpectedRevision)(nil),
		(*AppendStreamFailure_AccessDenied)(nil),
		(*AppendStreamFailure_StreamDeleted)(nil),
		(*AppendStreamFailure_TransactionMaxSizeExceeded)(nil),
	}
	file_streams_v2_proto_msgTypes[4].OneofWrappers = []any{
		(*AppendStreamResponse_Success)(nil),
		(*AppendStreamResponse_Failure)(nil),
	}
	file_streams_v2_proto_msgTypes[6].OneofWrappers = []any{
		(*MultiStreamAppendResponse_Success_)(nil),
		(*MultiStreamAppendResponse_Failure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_streams_v2_proto_rawDesc), len(file_streams_v2_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streams_v2_proto_goTypes,
		DependencyIndexes: file_streams_v2_proto_depIdxs,
		EnumInfos:         file_streams_v2_proto_enumTypes,
		MessageInfos:      file_streams_v2_proto_msgTypes,
	}.Build()
	File_streams_v2_proto = out.File
	file_streams_v2_proto_goTypes = nil
	file_streams_v2_proto_depIdxs = nil
}
