// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: streams.proto

package streams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Streams_Read_FullMethodName        = "/event_store.client.streams.Streams/Read"
	Streams_Append_FullMethodName      = "/event_store.client.streams.Streams/Append"
	Streams_Delete_FullMethodName      = "/event_store.client.streams.Streams/Delete"
	Streams_Tombstone_FullMethodName   = "/event_store.client.streams.Streams/Tombstone"
	Streams_BatchAppend_FullMethodName = "/event_store.client.streams.Streams/BatchAppend"
)

// StreamsClient is the client API for Streams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsClient interface {
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadResp], error)
	Append(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppendReq, AppendResp], error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	Tombstone(ctx context.Context, in *TombstoneReq, opts ...grpc.CallOption) (*TombstoneResp, error)
	BatchAppend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BatchAppendReq, BatchAppendResp], error)
}

type streamsClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsClient(cc grpc.ClientConnInterface) StreamsClient {
	return &streamsClient{cc}
}

func (c *streamsClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Streams_ServiceDesc.Streams[0], Streams_Read_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadReq, ReadResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_ReadClient = grpc.ServerStreamingClient[ReadResp]

func (c *streamsClient) Append(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppendReq, AppendResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Streams_ServiceDesc.Streams[1], Streams_Append_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppendReq, AppendResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_AppendClient = grpc.ClientStreamingClient[AppendReq, AppendResp]

func (c *streamsClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Streams_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsClient) Tombstone(ctx context.Context, in *TombstoneReq, opts ...grpc.CallOption) (*TombstoneResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TombstoneResp)
	err := c.cc.Invoke(ctx, Streams_Tombstone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsClient) BatchAppend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BatchAppendReq, BatchAppendResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Streams_ServiceDesc.Streams[2], Streams_BatchAppend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchAppendReq, BatchAppendResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_BatchAppendClient = grpc.BidiStreamingClient[BatchAppendReq, BatchAppendResp]

// StreamsServer is the server API for Streams service.
// All implementations must embed UnimplementedStreamsServer
// for forward compatibility.
type StreamsServer interface {
	Read(*ReadReq, grpc.ServerStreamingServer[ReadResp]) error
	Append(grpc.ClientStreamingServer[AppendReq, AppendResp]) error
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	Tombstone(context.Context, *TombstoneReq) (*TombstoneResp, error)
	BatchAppend(grpc.BidiStreamingServer[BatchAppendReq, BatchAppendResp]) error
	mustEmbedUnimplementedStreamsServer()
}

// UnimplementedStreamsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamsServer struct{}

func (UnimplementedStreamsServer) Read(*ReadReq, grpc.ServerStreamingServer[ReadResp]) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStreamsServer) Append(grpc.ClientStreamingServer[AppendReq, AppendResp]) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedStreamsServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStreamsServer) Tombstone(context.Context, *TombstoneReq) (*TombstoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tombstone not implemented")
}
func (UnimplementedStreamsServer) BatchAppend(grpc.BidiStreamingServer[BatchAppendReq, BatchAppendResp]) error {
	return status.Errorf(codes.Unimplemented, "method BatchAppend not implemented")
}
func (UnimplementedStreamsServer) mustEmbedUnimplementedStreamsServer() {}
func (UnimplementedStreamsServer) testEmbeddedByValue()                 {}

// UnsafeStreamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsServer will
// result in compilation errors.
type UnsafeStreamsServer interface {
	mustEmbedUnimplementedStreamsServer()
}

func RegisterStreamsServer(s grpc.ServiceRegistrar, srv StreamsServer) {
	// If the following call pancis, it indicates UnimplementedStreamsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Streams_ServiceDesc, srv)
}

func _Streams_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamsServer).Read(m, &grpc.GenericServerStream[ReadReq, ReadResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_ReadServer = grpc.ServerStreamingServer[ReadResp]

func _Streams_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamsServer).Append(&grpc.GenericServerStream[AppendReq, AppendResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_AppendServer = grpc.ClientStreamingServer[AppendReq, AppendResp]

func _Streams_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streams_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streams_Tombstone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TombstoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServer).Tombstone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Streams_Tombstone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServer).Tombstone(ctx, req.(*TombstoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streams_BatchAppend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamsServer).BatchAppend(&grpc.GenericServerStream[BatchAppendReq, BatchAppendResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Streams_BatchAppendServer = grpc.BidiStreamingServer[BatchAppendReq, BatchAppendResp]

// Streams_ServiceDesc is the grpc.ServiceDesc for Streams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_store.client.streams.Streams",
	HandlerType: (*StreamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Streams_Delete_Handler,
		},
		{
			MethodName: "Tombstone",
			Handler:    _Streams_Tombstone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Streams_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Append",
			Handler:       _Streams_Append_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchAppend",
			Handler:       _Streams_BatchAppend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streams.proto",
}
